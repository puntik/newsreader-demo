<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
                        <id>https://murze.be/feed</id>
                                <link href="https://murze.be/feed"></link>
                                <title><![CDATA[murze.be - all blogposts]]></title>
                                <updated>2017-11-17T15:21:55+00:00</updated>
                        <entry>
            <title><![CDATA[Where a curly bracket belongs]]></title>
            <link rel="alternate" href="https://murze.be/where-a-curly-bracket-belongs" />
            <id>https://murze.be/959</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>My colleague <a href="https://twitter.com/brendt_gd">Brent</a> has some good thoughts on where to place curly brackets.</p>
<blockquote>
<p>Dedicating a whole blogpost to curly brackets might seem like overkill but I believe it's worth thinking about them. Not just because of one curly bracket, but because there's a bigger message in all this. Thinking about how we read and write code not only improves the quality of that code, it also increases our own and others ease of mind when working with it. It can improve the fluency of your work and free your mind to think about real important stuff.</p>
</blockquote>
<p><a href="https://www.stitcher.io/blog/where-a-curly-bracket-belongs">https://www.stitcher.io/blog/where-a-curly-bracket-belongs</a></p>]]>
            </summary>
            <updated>2018-01-19T10:28:27+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[I’m taking a break from cron.weekly]]></title>
            <link rel="alternate" href="https://murze.be/im-taking-a-break-from-cronweekly" />
            <id>https://murze.be/958</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>In the beginning of the year people tend to compile lists with everything they want to achieve in the next 365 days. But sometimes, instead of wanting to learn or start something new, it's also good to leave an old thing behind.</p>
<blockquote>
<p>A little over 2 years ago I started a weekly newsletter for Linux &amp; open source users, called cron.weekly. Today, I'm sending the last issue in what is probably going to be a pretty long time. I need a break.</p>
<p>Here's why.</p>
<p>tl;dr: I've got a wife, 2 kids, a (more than) full time job, 2 other side projects and a Netflix subscription. For now, cron.weekly doesn't fit in that list anymore.</p>
</blockquote>
<p><a href="https://ma.ttias.be/im-taking-break-cron-weekly/">https://ma.ttias.be/im-taking-break-cron-weekly/</a></p>
<p>There's really no shame in calling it quits on some things to make place for fresh activities. The last couple of months I've seen some people close to me stop doing things they were once passionate about, but didn't fully enjoy anymore. And in each case it turned out for the better.</p>]]>
            </summary>
            <updated>2018-01-18T19:08:43+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Oh Dear! Website and SSL Monitoring Application Is Now Live]]></title>
            <link rel="alternate" href="https://murze.be/oh-dear-website-and-ssl-monitoring-application-is-now-live" />
            <id>https://murze.be/957</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>Together with <a href="https://github.com/mattiasgeniar">Mattias</a> I've been working on <a href="https://ohdearapp.com/">Oh Dear!</a> for the last couple months. We launched it last week. If you want to try it out, just <a href="https://ohdearapp.com/sites">register</a> and you'll get a trial period of 10 days. No credit card is needed.</p>
<p>I plan on writing a few technical posts on the whole project in the next couple of months. Right now you can already read this excellent article written by <a href="https://twitter.com/@paulredmond">Paul Redmond</a> about what Oh Dear! can do for you.</p>
<blockquote>
<p>What differentiates Oh Dear from other uptime monitoring solutions, in my opinion, is the mixed content detection and SSL certificate monitoring. The web is moving to HTTPS, and your site’s availability can be affected by modern browsers when things go awry with your certificate.</p>
</blockquote>
<p><a href="https://laravel-news.com/oh-dear-app">https://laravel-news.com/oh-dear-app</a></p>]]>
            </summary>
            <updated>2018-01-18T19:02:18+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[How I redesigned my blog and moved it from Jekyll to Laravel]]></title>
            <link rel="alternate" href="https://murze.be/how-i-redesigned-my-blog-and-moved-it-from-jekyll-to-laravel" />
            <id>https://murze.be/956</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://twitter.com/christophrumpel">Cristopher Rumpel</a> recently launched a big redesign of his blog. In a new post he touches on why he moved away from his old solution, and what kind of problems he had to solved. Great read!</p>
<blockquote>
<p>One of my resolutions for 2017 was to redesign my blog. One week before the new year I faced myself with the challenge and thought to myself if this was still doable. Somehow I managed it and here it is. In this article I will explain the process and show you how I redesigned the blog with Tailwind CSS and moved it from Jekyll to Laravel with keeping almost the same performance.</p>
</blockquote>
<p><a href="https://christoph-rumpel.com/2018/01/how-i-redesigned-my-blog-and-moved-it-from-jekyll-to-laravel">https://christoph-rumpel.com/2018/01/how-i-redesigned-my-blog-and-moved-it-from-jekyll-to-laravel</a></p>]]>
            </summary>
            <updated>2018-01-16T15:50:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[What&#039;s new in Vue Devtools 4.0]]></title>
            <link rel="alternate" href="https://murze.be/whats-new-in-vue-devtools-40" />
            <id>https://murze.be/955</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>There's some cool stuff in the new version of the Vue devtools. <a href="https://twitter.com/Akryum">Guillame Chau</a>, member of the Vue core team, made a nice overview of the improvements.</p>
<blockquote>
<p>A big update was released to the Vue devtools just a few days ago. Let’s dive into the new features and improvements!</p>
</blockquote>
<p><a href="https://medium.com/the-vue-point/whats-new-in-vue-devtools-4-0-9361e75e05d0">https://medium.com/the-vue-point/whats-new-in-vue-devtools-4-0-9361e75e05d0</a></p>
<p>The are more cool features on the way as well:</p>
<blockquote>
<p>We also have a few things in the works, like a standalone Vue devtools app that will allow debugging any environment (not just Chrome and Firefox), a brand new Routing tab and an improved support for Set and Map types.</p>
</blockquote>]]>
            </summary>
            <updated>2018-01-16T15:45:01+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Passing data to layouts in Blade through extends]]></title>
            <link rel="alternate" href="https://murze.be/passing-data-to-layouts-in-blade-through-extends" />
            <id>https://murze.be/954</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>On his blog, <a href="https://twitter.com/sebdedeyne?lang=en">Sebastian De Deyne</a>, shares a quick tip on how to pass data to a layout in Laravel.</p>
<blockquote>
<p>Laravel quick tip! The @extends Blade directive accepts a second (undocumented) parameter to pass data to the parent layout.</p>
</blockquote>
<p><a href="https://sebastiandedeyne.com/posts/2018/passing-data-to-layouts-in-blade-through-extends">https://sebastiandedeyne.com/posts/2018/passing-data-to-layouts-in-blade-through-extends</a></p>]]>
            </summary>
            <updated>2018-01-16T15:44:35+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Optimizing colinodell/json5 with Blackfire]]></title>
            <link rel="alternate" href="https://murze.be/optimizing-colinodelljson5-with-blackfire" />
            <id>https://murze.be/953</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://twitter.com/colinodell">Collin O' Dell</a>, member of the <a href="https://thephpleague.com/">PHP League</a>, shares how he was able to significantly improve the performance <a href="https://github.com/colinodell/json5">his json5 package</a> using <a href="https://blackfire.io/">Blackfire</a> profiling.</p>
<blockquote>
<p>Back in November I released colinodell/json5 - a JSON5 parser for PHP. It's essentially a drop-in replacement for PHP's json_decode() function, but it allows things like comments, trailing commas, and more.</p>
<p>...</p>
<p>I always knew that a PHP-based implementation would be slower than PHP's native C implementation, but execution time measured in minutes was completely unacceptable!</p>
<p>So I fired up Blackfire (which I've previously used to optimize league/commonmark) and got to work.</p>
</blockquote>
<p><a href="https://www.colinodell.com/blog/201801/optimizing-colinodelljson5-blackfire">https://www.colinodell.com/blog/201801/optimizing-colinodelljson5-blackfire</a></p>]]>
            </summary>
            <updated>2018-01-15T12:37:10+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[★ How to send a &quot;trial expiring soon&quot; mail in Laravel Spark]]></title>
            <link rel="alternate" href="https://murze.be/how-to-send-a-trial-expiring-soon-mail-in-laravel-spark" />
            <id>https://murze.be/952</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>I'm currently building a webapp named <a href="https://ohdearapp.com/">Oh Dear</a>:  an easy to use and beautiful website monitor. It has recently gone into it's beta phase. At the moment of writing everybody can <a href="https://ohdearapp.com/register">register a new account</a>. After you've registered you'll start your trial period of 10 days. </p>
<p>Oh Dear is built on top <a href="https://spark.laravel.com/">Laravel Spark</a>, a Laravel based template to kick off SaaS projects. It offers logic for organising users into teams, handles trial periods, subscriptions, payments, invoices and much more. </p>
<p>Spark includes the option of lettings users create and join teams. When this team mode is active a subscription is related to a team and not a user. When a user registers and creates his/her first team, there is no subscription active, but the team is in a trial period.</p>
<p>Unfortunately Spark will not sent out a mail to team owners whose teams are in trial periods that will soon expire. Luckily it's easy to add that yourself. I'll show you how to do just that in this post. Along the way you'll learn some good general tips for sending out mails in batches. Let's get started!</p>
<h2 id="determining-which-teams-should-be-mailed">Determining which teams should be mailed <a class='text-grey' href='#determining-which-teams-should-be-mailed'>#</a></h2>
<p>First we'll add a function to the <code>Team</code> model that determines if the team is on a trial that will expire soon. This function will return <code>true</code> for teams without a subscription and whose trials will end less that two days of the current time.</p>
<pre><code class="language-php">public function onSoonExpiringTrial(): bool
{
    if ($this-&gt;subscribed()) {
        return false;
    }

    if (! $this-&gt;onGenericTrial()) {
        return false;
    }

    return now()-&gt;addDays(2)-&gt;greaterThan($this-&gt;trial_ends_at);
}</code></pre>
<h2 id="adding-an-extra-field-to-the-teams-table">Adding an extra field to the teams table <a class='text-grey' href='#adding-an-extra-field-to-the-teams-table'>#</a></h2>
<p>Next we should create a migration to add a field called <code>trial_expiring_mail_sent_at</code> to the teams table. We'll explain why we need that field in the next section.</p>
<pre><code class="language-php">use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class AddTrialExpiringMailSentAtToTeamsTable extends Migration
{
    public function up()
    {
        Schema::table('teams', function (Blueprint $table) {
            $table-&gt;timestamp('trial_expiring_mail_sent_at')-&gt;nullable();
        });
    }
}</code></pre>
<h2 id="mailing-the-owner-of-the-teams">Mailing the owner of the teams <a class='text-grey' href='#mailing-the-owner-of-the-teams'>#</a></h2>
<p>The actual mails are sent in an Artisan command named <code>ohdear:email-teams-with-expiring-trials</code>. That command is <a href="https://laravel.com/docs/5.5/scheduling">scheduled</a> to run daily. Here is the actual code of that command:</p>
<pre><code class="language-php">namespace App\Console\Commands;

use App\Mail\TrialExpiringSoon;
use App\Team;
use Exception;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Mail;

class EmailTeamsWithExpiringTrials extends Command
{
    protected $signature = 'ohdear:email-teams-with-expiring-trials';

    protected $description = 'Email teams with expiring trials.';

    protected $mailsSent = 0;

    protected $mailFailures = 0;

    public function handle()
    {
        $this-&gt;info('Sending trial expiring soon mails...');

        Team::all()
            -&gt;filter-&gt;onSoonExpiringTrial()
            -&gt;each(function (Team $team) {
                $this-&gt;sendTrialEndingSoonMail($team);
            });

        $this-&gt;info("{$this-&gt;mailsSent} trial expiring mails sent!");

        if ($this-&gt;mailFailures &gt; 0) {
           $this-&gt;error("Failed to send {$this-&gt;mailFailures} trial expiring mails!");
        }
    }

    protected function sendTrialEndingSoonMail(Team $team)
    {
        try {
            if ($team-&gt;wasAlreadySentTrialExpiringSoonMail()) {
                return;
            }

            $this-&gt;comment("Mailing {$team-&gt;owner-&gt;email} (team {$team-&gt;name})");
            Mail::to($team-&gt;owner-&gt;email)-&gt;send(new TrialExpiringSoon($team));

            $this-&gt;mailsSent++;

            $team-&gt;rememberHasBeenSentTrialExpiringSoonMail();
        } catch (Exception $exception) {
            $this-&gt;error("exception when sending mail to team {$team-&gt;id}", $exception);
            report($exception);
            $this-&gt;mailFailures++;
        }
    }
}</code></pre>
<p>The actual sending of the mail in <code>sendTrialEndingSoonMail</code> is wrapped in a try/catch block. So if something goes wrong sending the mail the command doesn't blow up, but continues with the next team. </p>
<p>Before sending a mail we'll call <code>wasAlreadySentTrialExpiringSoonMail</code>. That function will return <code>true</code> if <code>trial_expiring_mail_sent_at</code> is not <code>null</code>. After a mail is sent, a call to <code>rememberHasBeenSentTrialExpiringSoonMail</code> will set the <code>trial_expiring_mail_sent_at</code> of the team to the current datetime. </p>
<p>All this will ensure that the command is restartable. If something goes wrong running the command you can simply, after you've solved the problem, run the command again. The checks on <code>trial_expiring_mail_sent_at</code> will ensure that no team is mailed twice.</p>
<h2 id="the-trialexpiringsoon-mailable">The TrialExpiringSoon mailable <a class='text-grey' href='#the-trialexpiringsoon-mailable'>#</a></h2>
<p>You've probably noticed in the code of the command in the previous section that the mail itself is a <a href="https://laravel.com/docs/5.5/mail#generating-mailables">Mailable</a>. There's really nothing special going there, but I'll include the code for completeness sake.</p>
<pre><code class="language-php">namespace App\Mail;

use App\Models\Team;
use Illuminate\Bus\Queueable;
use Illuminate\Mail\Mailable;
use Illuminate\Queue\SerializesModels;

class TrialExpiringSoon extends Mailable
{
    use Queueable, SerializesModels;

    /** @var \App\Team */
    public $team;

    public function __construct(Team $team)
    {
        $this-&gt;team = $team;
    }

    public function build()
    {
        return $this
            -&gt;subject("Your Oh Dear! trial account will expire soon")
            -&gt;markdown('mail.trialExpiringSoon', [
                'team' =&gt; $this-&gt;team,
            ]);
    }
}
</code></pre>
<h2 id="testing-the-command">Testing the command <a class='text-grey' href='#testing-the-command'>#</a></h2>
<p>Laravel has a <a href="https://laravel.com/docs/5.5/mocking#mail-fake">Mail Fake</a> to easily test if and how mails are sent. In this test we create a team that is on a trial that will expire on 2018-01-31. We use Carbon's <code>setTestNow</code> function to fake the current time. The tests itself should be pretty self-explanatory. </p>
<pre><code class="language-php">namespace Tests\Unit\Commands;

use App\Mail\TrialExpiringSoon;
use App\Team;
use App\User;
use Carbon\Carbon;
use Illuminate\Support\Facades\Mail;
use Laravel\Spark\TeamSubscription;
use Tests\TestCase;

class EmailTeamsWithExpiringTrialsTest extends TestCase
{
    /** @var \App\Team */
    protected $team;

    /** @var \App\User */
    protected $user;

    public function setUp()
    {
        parent::setUp();

        $this-&gt;user = factory(User::class)-&gt;create();

        $this-&gt;team = factory(Team::class)-&gt;create([
            'trial_ends_at' =&gt; Carbon::create(2018, 1, 31),
            'owner_id' =&gt; function () {
                return $this-&gt;user-&gt;id;
            }]);

        $this-&gt;team-&gt;users()-&gt;attach($this-&gt;user, ['role' =&gt; 'admin']);

        Mail::fake();
    }

    /** @test */
    public function it_can_send_a_mail_concerning_a_trial_expiring_soon()
    {
        $this-&gt;setNow(2018, 1, 29);
        $this-&gt;artisan('ohdear:email-teams-with-expiring-trials');
        Mail::assertNotSent(TrialExpiringSoon::class);

        $this-&gt;setNow(2018, 1, 30);
        $this-&gt;artisan('ohdear:email-teams-with-expiring-trials');
        Mail::assertSent(TrialExpiringSoon::class, 1);
        Mail::assertSent(TrialExpiringSoon::class, function (TrialExpiringSoon $mail) {
            return $mail-&gt;hasTo($this-&gt;user-&gt;email);
        });
    }

    /** @test */
    public function it_will_send_the_mail_concerning_a_trial_expiring_soon_only_once()
    {
        $this-&gt;setNow(2018, 1, 30);

        $this-&gt;artisan('ohdear:email-teams-with-expiring-trials');
        Mail::assertSent(TrialExpiringSoon::class, 1);

        $this-&gt;artisan('ohdear:email-teams-with-expiring-trials');
        Mail::assertSent(TrialExpiringSoon::class, 1);
    }

    /** @test */
    public function it_will_not_send_the_mail_concerning_a_trial_expiring_soon_only_if_the_team_has_a_subscription()
    {
        $this-&gt;setNow(2018, 1, 30);

        TeamSubscription::create([
            'name' =&gt; 'default',
            'team_id' =&gt; $this-&gt;team-&gt;id,
            'stripe_id' =&gt; 'my-plan-id',
            'stripe_plan' =&gt; 'my-plan',
            'quantity' =&gt; 1,
        ]);

        $this-&gt;artisan('ohdear:email-teams-with-expiring-trials');

        Mail::assertNotSent(TrialExpiringSoon::class);
    }

    protected function setNow(int $year, int $month, int $day)
    {
        $newNow = Carbon::create($year, $month, $day)-&gt;startOfDay();

        Carbon::setTestNow($newNow);

        return $this;
    }
}</code></pre>
<h2 id="in-closing">In closing <a class='text-grey' href='#in-closing'>#</a></h2>
<p>I hope you've enjoyed this little tutorial on how to add a trial expiring mail to Laravel Spark. The code in this blog post is the actual code being used at <a href="https://ohdearapp.com/">Oh Dear!</a>. So if you want to get the actual trial expiring mail in your mailbox, <a href="https://ohdearapp.com/register">create an account</a> and wait for 8 days :-)</p>]]>
            </summary>
            <updated>2018-01-17T19:43:12+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Use the &quot;wasRecentlyCreated&quot; model attribute to check if your model was created or found]]></title>
            <link rel="alternate" href="https://murze.be/use-the-wasrecentlycreated-model-attribute-to-check-if-your-model-was-created-or-found" />
            <id>https://murze.be/951</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Quick <a href="https://twitter.com/laravelphp?ref_src=twsrc%5Etfw">@laravelphp</a> tip:<br>Use the "wasRecentlyCreated" model attribute to check if your model was created or found 👍 <a href="https://t.co/HZwdDyqAw4">pic.twitter.com/HZwdDyqAw4</a></p>— Marcel Pociot (@marcelpociot) <a href="https://twitter.com/marcelpociot/status/949689761979039744?ref_src=twsrc%5Etfw">January 6, 2018</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]>
            </summary>
            <updated>2018-01-09T12:55:20+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[★ Handling CORS in a Laravel application]]></title>
            <link rel="alternate" href="https://murze.be/handling-cors-in-a-laravel-application" />
            <id>https://murze.be/948</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>Recently we released <a href="https://github.com/spatie/laravel-cors">laravel-cors</a>. This package can add the necessary CORS headers of your Laravel app. In this post I'd like to give a quick explanation of what CORS is and how you can use the package.</p>
<h2 id="what-is-cors">What is CORS <a class='text-grey' href='#what-is-cors'>#</a></h2>
<p>Imagine that all JavaScript code for domain X running in a browser would be able to make http requests to an domain Y. Malious code on domain X would be able to interact with site Y without you knowing. In most circumstances you don't want this. Luckily all major browsers only allow sites to make requests against their own domain. They don't allow JavaScript code to make request against a sites on different domains. This is called <a href="https://www.w3.org/Security/wiki/Same_Origin_Policy">the same-origin policy</a>.</p>
<p>But there are some scenarios where you do want to allow that behaviour. Think of an API running on domain X that you want to consume via JavaScript running on domain Y. CORS stands for <a href="https://www.w3.org/TR/cors/">cross-origin resource sharing</a>. It's a standardized way to legitimately poke some holes in the same-origin policy.</p>
<h2 id="simple-requests">Simple requests <a class='text-grey' href='#simple-requests'>#</a></h2>
<p>When JavaScript running on domain X performs a <code>HEAD</code> <code>GET</code> or certain <code>POST</code> request (with <code>application/x-www-form-urlencoded</code>, <code>multipart/form-data</code> or <code>text/plain</code> to domain Y the browser will add an <code>Origin</code> header. The application running on domain Y can use this header to check if the request is permitted. If the server responds with a header <code>Access-Control-Allow-Origin</code> containing the domain X then the browser will conclude that request was allowed. If the server didn't do that most browsers won't allow the JS on domain X to perform any requests towards domain Y.</p>
<h2 id="all-other-requests">All other requests <a class='text-grey' href='#all-other-requests'>#</a></h2>
<p>All requests covered by the previous section will probably only be used to retrieve some data. All other ones such as certain <code>POST</code> requests, <code>PUT</code>, <code>PATCH</code>, <code>DELETE</code> will probably modify existing data on the server. For those kinds of request the browser will send a preflight request before doing the actualy request. </p>
<p>This preflight request using the <code>OPTIONS</code> verb.</p>]]>
            </summary>
            <updated>2018-01-08T16:09:27+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Deploy your Laravel Forge sites with your voice]]></title>
            <link rel="alternate" href="https://murze.be/deploy-your-laravel-forge-sites-with-your-voice" />
            <id>https://murze.be/950</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://twitter.com/marcelpociot">Marcel Pociot</a>, creator of the <a href="https://botman.io/">BotMan</a> framework, explains how you can leverage <a href="https://developer.amazon.com/alexa">Alexa</a>, BotMan and Laravel Forge to deploy sites with your voice.</p>
<p><a href="http://marcelpociot.de/blog/deploy-your-laravel-forge-sites-with-your-voice">http://marcelpociot.de/blog/deploy-your-laravel-forge-sites-with-your-voice</a></p>]]>
            </summary>
            <updated>2018-01-08T11:21:59+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[I’m harvesting credit card numbers and passwords from your site. Here’s how.]]></title>
            <link rel="alternate" href="https://murze.be/im-harvesting-credit-card-numbers-and-passwords-from-your-site-heres-how" />
            <id>https://murze.be/949</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>In an article at <a href="https://hackernoon.com">Hackernoon</a>,  <a href="https://twitter.com/D__Gilbertson">David Gilbertson</a> warns about the dangers of trusting 3rd party packages on npm. He goes into how a package can make unwanted http requests in the browser and how you can protect yourself against that.</p>
<blockquote>
<p>It’s been a frantic week of security scares — it seems like every day there’s a new vulnerability. It’s been a real struggle for me personally to pretend like I understand what’s going on when asked about it by family members.</p>
<p>Seeing people close to me get all flustered at the prospect of being “powned” has really put things in perspective for me.</p>
<p>So, it is with a heavy heart that I’ve decided to come clean and tell you all how I’ve been stealing usernames, passwords and credit card numbers from your sites for the past few years.</p>
</blockquote>
<p><a href="https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5">https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5</a></p>]]>
            </summary>
            <updated>2018-01-08T12:35:54+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[★ The story behind our open source efforts]]></title>
            <link rel="alternate" href="https://murze.be/the-story-behind-our-open-source-efforts" />
            <id>https://murze.be/947</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><em>This post was first published on <a href="https://24daysindecember.net/2017/12/23/the-story-behind-our-open-source-efforts/">24daysindecember.net</a></em></p>
<p>Chances are that you’ve never heard of my company <a href="https://spatie.be">Spatie</a>. We specialize in creating Laravel applications for our clients. Our team is rather small: we consist of only 6 developers and one manager. On first glance we are just a web agency like there are so many others. But there’s one thing that sets our company apart: we have an open source first policy. We try to create and contribute to open source as much as possible.</p>
<p>Currently we have around 170 open source repositories on GitHub. Our packages have been downloaded nearly 8 million times. They are being downloaded 800 000 times each month. Git awards is a site that ranks GitHub organisations based on the amount of stars their repos have. This past year we managed to take <a href="http://git-awards.com/users?language=php">the #3 spot on Git Awards’ worldwide PHP developers list</a>. And yeah, I know that the amount of stars is not an important metric, but it’s still a nice achievement for a smallish team.</p>
<p>This all did not happen overnight. Read on to learn the story behind our open source efforts.</p>
<h2 id="the-first-package">The first package <a class='text-grey' href='#the-first-package'>#</a></h2>
<p>When I got started to work for Spatie, somewhere around 2007, I dared to write my own framework. The projects I was working on at that time were very small. Submitting a simple form was the most advanced thing these sites should do.</p>
<p>After a few years our projects got a bit more advanced. I realised that writing and maintaining my own framework wasn’t going to cut it anymore. I heard about this fancy thing called Zend Framework 1 and starting using that.</p>
<p>Let’s skip ahead a few more years. In 2012 and 2013 I felt that the PHP ecosystem was pretty stale and I considered switching to Ruby and the Rails framework. But then I bumped into Laravel 4.0. I was immediately impressed by the expressive syntax and the big focus on developer happiness. I used it for a couple of projects and the more I learned about it, the more I loved using it.</p>
<p>At that time a guy called <a href="https://twitter.com/jeffrey_way">Jeffrey Way</a> started his next project <a href="https://laracasts.com">Laracasts</a>: a video tutorial site dedicated to Laravel. Realising that his videos could speed up my learning process immensely I immediately bought a lifetime subscription.</p>
<p>On the 4th of March in 2014 Jeffrey published a video titled “<a href="https://laracasts.com/lessons/continuous-integration-with-travis">Continuous Integration With Travis</a>“. My mind was blown. <a href="https://travis-ci.org/">Travis</a> and the integration with GitHub looked so cool that I wanted to use it. A couple of months before he made the Travis video Jeffrey made a miniseries <a href="https://laracasts.com/lessons/package-development-101">on package development</a>. Those videos sparked the thought in my mind that I could create a package of my own.</p>
<p>In a project at the time we needed to automatically create screenshots of a website. With the things I learned in the Laracasts-videos I started working on my first package <a href="https://github.com/spatie/browsershot/tree/1.0.0">Browsershot</a>. In essence it was just a simple wrapper around <a href="http://phantomjs.org/">PhantomJS</a> (<a href="https://github.com/spatie/browsershot">the current version</a> uses Headless Chrome and <a href="https://github.com/GoogleChrome/puppeteer">Puppeteer</a>).</p>
<p>It was pretty exciting working in the open. I was thrilled every time the download counter got up and was incredibly happy that other people started <a href="http://www.gordonmurray.com/2015/02/09/how-i-automate-sharing-content-to-linkedin-using-ayliens-content-analysis-api-and-browsershot/">writing about it</a>.</p>
<h2 id="more-packages">More packages! <a class='text-grey' href='#more-packages'>#</a></h2>
<p>In the Zend Framework days I made used a custom-built application template, called Blender, to kickstart all client projects. It was a sort of mini-cms. Beside the traditional CMS-functions Blender could do a lot of cool things: pull in data from Analytics to show graphs about the usage of the site, handle uploaded files, subscribe users to a MailChimp list, …</p>
<p>To power new projects I needed a Laravel powered version of Blender and started creating it from scratch. I soon realised that some of the things I was porting to Laravel could be useful for other developers as well and decided to export these functionalities to external packages.</p>
<p>In quick succession packages like <a href="https://github.com/spatie/laravel-newsletter">laravel-newsletter</a>, <a href="https://github.com/spatie/laravel-medialibrary">laravel-medialibrary</a> and <a href="https://github.com/spatie/laravel-analytics">laravel-analytics</a> were made.</p>
<p>I started to enjoy package development more and more. The positive feedback that I got early on from package users was very encouraging. I always considered coding purely as work, but because it was so much fun creating code that others could use as well I started coding in my free time as well.</p>
<p>Besides working on packages I also polished the aformentioned <a href="https://github.com/spatie-custom/blender">application template called Blender</a> and open sourced that too.</p>
<p>Currently every new package that we create gets born inside a client project. In almost every project we find some functionality that can be extracted to it’s own package.</p>
<h2 id="the-benefits-of-creating-packages">The benefits of creating packages <a class='text-grey' href='#the-benefits-of-creating-packages'>#</a></h2>
<p>There are many benefits of creating packages that makes time working on open source code well spent.</p>
<p>A lot can be learned while creating a package. Each package needs to be carefully crafted. It provides a clear and understandable syntax. Like Laravel, I want that all our packages put a great emphasis on developer hapiness. They should be easy to use. They should have great documentation. They should have clear tests. Thinking about how other people will use your code will make you a better developer.</p>
<p>The issues reported and the PRs submitted by the users of our packages provided another chance of learning. People can point to mistakes that are in our packages and can propose interesting new features that we didn’t think about.</p>
<p>Sometimes, as a package gains some traction, you get quality code for free. Our <a href="https://github.com/spatie/laravel-fractal">laravel-fractal</a> package is a developer friendly wrapper around <a href="https://github.com/thephpleague/fractal">The League’s Fractal package</a>. I coded up the basic functionality to I needed myself and tagged that 1.0.0. In the next weeks I almost daily got a pull request adding another great feature to the package. And now it supports almost everything League’s Fractal can do. I think 90% of the code of that package was written by the community.</p>
<p>Of course we’re also <a href="https://github.com/spatie/blender/blob/master/composer.json#L39-L70">dogfooding ourselves</a>. Our own packages get used on most projects. If we discover a bug in a package used in a project we can very quickly fix that and distribute that fix through the power of Composer to our other projects.</p>
<p>There are also commercial benefits. The past year we’ve landed some cool projects because of our open source work. In most cases these new clients were already using our stuff. Even though attracting clients isn’t the primary goal of our open source efforts, it sure is a nice side effect.</p>
<p>The positive feedback from package users also gave me enough confidence to start <a href="https://murze.be">a blog</a> and start speaking publicly. The past years I’ve spoken at several local users groups (and I’m co-organizing <a href="http://phpantwerp.be">the one in my home town</a>) and a lot of conferences world wide. The past few years I had the pleasure of giving talks in Washington, Amsterdam, Tokyo, New Delhi, New York, Istanbul and of course my hometown Antwerp. At <a href="https://murze.be/me#talks">all those occasions</a> I got to meet a lot of awesome fellow developers, including <a href="https://twitter.com/heiglandreas">Andreas</a>, who runs <a href="https://24daysindecember.net"><a href="https://24daysindecember.net">https://24daysindecember.net</a></a>. That all probably wouldn’t have happened if I stayed in my little bubble. Working on open source helped getting to connect to the community. That sounds a bit corny, but that doesn’t make it less true.</p>
<h2 id="making-time-to-work-on-open-source">Making time to work on open source <a class='text-grey' href='#making-time-to-work-on-open-source'>#</a></h2>
<p>People often ask if it isn’t very time-consuming to create packages. The truth is that it indeed takes a lot of time. Creating the code for the package itself, writing tests, writing documentation and getting the word out all takes a fair amount of time.</p>
<p>And that’s just the start. When a first stable release gets tagged the work is not over. Maintaining a package, responding to issues, reviewing PR’s takes a lot of time (and dedication) too. At the time of this writing we’ve responded to <a href="https://github.com/issues?q=is%3Aopen+is%3Aissue+user%3Aspatie+is%3Apublic">over 3 000 issues</a> and reviewed <a href="https://github.com/pulls?q=is%3Aopen+is%3Apr+user%3Aspatie+is%3Apublic">more a lot of PRs</a>.</p>
<p>We do long-term planning at Spatie, but we also have a weekly short-term planning meeting. When scheduling out to the coming week we only plan four days. So we have one work day we can be a bit flexible with. Do not imagine that day as like a fixed day, that time is mostly spread out in that week.</p>
<p>In that “fifth” day everybody in our company is allowed to work on open source stuff or their own projects (which, if possible, will be opensourced as well). For our employees this has a nice benifit that they can keep things interesting by switching between working on client projects and open sourcy stuff.</p>
<p>Personally I do enjoy working on packages in my free time as well. So a few times a week I spend some time in the evening to continue improving the released packages and create new stuff.</p>
<h2 id="meet-the-team">Meet the team <a class='text-grey' href='#meet-the-team'>#</a></h2>
<p>Because I blog, tweet and try to speak at conferences a lot I’ve become the public face of the company’s open source efforts. But you should know that I’m not doing it all by myself. I’ve got a great team behind me that does a lot of the work.</p>
<p>Since the start of Spatie I was the sole back-end developer at our company. That changed mid 2015 when <a href="https://twitter.com/sebdedeyne">Seb</a> joined our team.He loves working on the more lower level PHP and JavaScript stuff. He’s the primary author of the <a href="https://github.com/spatie/regex">regex</a>, <a href="https://github.com/spatie/schema-org">schema-org</a>, <a href="https://github.com/spatie/phpunit-snapshot-assertions">phpunit-snapshot-assertions</a> and many many more packages. And our <a href="https://github.com/spatie/dashboard.spatie.be">dashboard</a> and <a href="https://spatie.be/en/opensource/javascript">JavaScript</a> code wouldn’t be as good if it weren’t for him. Be sure to bookmark <a href="https://sebastiandedeyne.com/">his blog</a>.</p>
<p>Last year we had a great intern, <a href="https://twitter.com/alexvanderbist">Alex</a>, who has meanwhile joined our team. He’s helping out maintaining <a href="https://github.com/spatie/laravel-permission">laravel-permission</a>, which has gotten <a href="https://packagist.org/packages/spatie/laravel-permission">quite popular</a>. He’s currenlty doing some kick-ass work on some non-released packages / projects that I can’t talk about yet.</p>
<p>A couple of months ago we hired <a href="https://twitter.com/introwit">Harish</a>, our first remote employee. He’s helping out with issue across all our repos and laid the foundation of <a href="https://github.com/spatie/dns">our dns package</a>.</p>
<p><a href="https://twitter.com/brendt_gd">Brent</a>, our latest hire, likes to focus on performance. His passion surely reflects on the opensource work he’s been doing. He created the <a href="https://github.com/spatie/laravel-binary-uuid">laravel-binary-uuid</a> package, he pushed me (in a friendly way) to add <a href="https://github.com/spatie/laravel-medialibrary/issues/810">support for responsive images</a> to our medialibrary. Currently he’s busy creating <a href="https://github.com/spatie/async">a very cool async package</a>. He also has <a href="https://www.stitcher.io/blog">a cool blog</a>.</p>
<p>And last but not least there’s <a href="https://twitter.com/willemvbockstal">Willem</a>, who is the founder of Spatie. He’s responsible for the good looks of <a href="https://github.com/spatie/dashboard.spatie.be">our dashboard</a>, our <a href="https://dnsrecords.io/">dns lookup service</a>, the various <a href="http://vue-table-component.spatie.be/">demo pages of our packages</a>, the copy of <a href="https://www.patreon.com/spatie">our Patreon page</a> and much much more.</p>
<p>I’m really happy that the every member of our team enjoys working on open source. Hopefully they all will keep working for Spatie in the foreseeable future. I do hope that if somebody would leave us for greener pastures, that they’ll bring the open source spirit to their new endeavours.</p>
<h2 id="top-10-of-most-popular-packages">Top 10 of most popular packages <a class='text-grey' href='#top-10-of-most-popular-packages'>#</a></h2>
<p>When taking amount of downloads into consideration these are our 10 most popular packages:</p>
<ol>
<li><a href="https://github.com/spatie/laravel-backup">laravel-backup</a></li>
<li><a href="https://github.com/spatie/laravel-fractal">laravel-fractal</a></li>
<li><a href="https://github.com/spatie/db-dumper">db-dumper</a></li>
<li><a href="https://github.com/spatie/laravel-permission">laravel-permission</a></li>
<li><a href="https://github.com/spatie/pdf-to-image">pdf-to-image</a></li>
<li><a href="https://github.com/spatie/laravel-medialibrary">laravel-medialibrary</a></li>
<li><a href="https://github.com/spatie/fractalistic">fractalistic</a></li>
<li><a href="https://github.com/spatie/laravel-newsletter">laravel-newsletter</a></li>
<li><a href="https://github.com/spatie/laravel-glide">laravel-glide</a></li>
<li><a href="https://github.com/spatie/laravel-tail">laravel-tail</a></li>
</ol>
<p>Some of these packages, like <a href="https://github.com/spatie/db-dumper">db-dumper</a>, probably get a big download boost because there are required by other packages.</p>
<h2 id="not-so-popular-packages">Not so popular packages <a class='text-grey' href='#not-so-popular-packages'>#</a></h2>
<p>There are some packages, that we ourselves use in every single project, that I expected to be more popular. I hope by mentioning them here they’ll get a little attention. If you decide to give the ones mentioned below a shot, I hope that you’ll enjoy using them as much as we do.</p>
<p>The first one in this category is <a href="https://docs.spatie.be/laravel-uptime-monitor/v3/introduction">laravel-uptime-monitor</a>. This package can check the uptime of multiple sites. It will notify you when your site is down (and when it comes back up). You can also be notified a few days before an SSL certificate on one of your sites expires. Under the hood, the package leverages Laravel native notifications, so it’s easy to use Slack, Telegram or your preferred notification provider.</p>
<p>Secondly, there’s <a href="https://github.com/spatie/laravel-translatable">laravel-translatable</a>. This one can make your Eloquent models hold translations. Unlike <a href="https://github.com/dimsav/laravel-translatable">Dimitris Savvopoulos’ excellent translatable package</a>, ours does not need separate translation tables to store translations. Our package stores the translations as json in a column of the table. It’s very easy to work with, there are no extra queries needed to fetch translations. We got the idea to store translations as json in a column from <a href="https://github.com/themsaid">Mohamed Said</a> (who now enjoys fame as Laravel employee #1 ?).</p>
<p>Even though you saw <a href="https://github.com/spatie/laravel-medialibrary">laravel-medialibrary</a> int the top 10 above, I think this one deserves to be a few places higher. The package can associate all kind of media files (images, PDFs, …) with Eloquent models. It can generate thumbnails, and can store files on external filesystem and generate URLs to the files. It’s very easy to work with and it has <a href="https://docs.spatie.be/laravel-medialibrary/v6/introduction">excellent documentation</a>. Our team is already hard at work in creating v7 which will add support for zipping assets on the fly, responsive images, client side components and much more.</p>
<h2 id="how-can-you-show-appreciation-for-our-efforts">How can you show appreciation for our efforts <a class='text-grey' href='#how-can-you-show-appreciation-for-our-efforts'>#</a></h2>
<p>Maybe I should have mentioned it before, but our packages are not entirely free. There’s a special license on them: <a href="https://en.wikipedia.org/wiki/Postcardware">Postcardware</a>. If any of our stuff makes it into your production environment, we’d hight appreciate you sending us a postcard. This is our address:</p>
<p>Spatie bvba<br />
Samberstraat 69D<br />
2060 Antwerp<br />
Belgium</p>
<p>Every week the postman delivers some postcards to us. For my team and I it’s nice to know that our stuff is being used all over the globe. We’ve gotten postcards from all continents. We even got one from <a href="https://en.wikipedia.org/wiki/Vanuatu">Vanuatu</a> which, for us, is litteraly on the other side of the globe. You can take a look at our postcard collection as well. They all are <a href="https://spatie.be/en/opensource/postcards">published</a> on our website.</p>
<p>Another way you can show your appreciation is by becoming one of our patreons. Like mentioned on <a href="https://www.patreon.com/spatie">our Patreon page</a> your donation will help us to dedicate even more time to maintain and create new open source code.</p>
<p>You can also give us a pat on the back by starring one of <a href="https://github.com/spatie/">our repos on GitHub</a>.</p>
<h2 id="the-future">The future <a class='text-grey' href='#the-future'>#</a></h2>
<p>We don’t have a fixed roadmap for new packages. It depends a bit on the client projects we’re handling. If there is something there that can be solved in a generic way, we’ll create a package.</p>
<p>There’s been a time when I though that, because we’d already solved a lot of common problems, the package output of our team was going to diminish a bit. But it’s quite the opposite. Almost every member of our team has some good package ideas.</p>
<p>One of the bigger things we’re working on now as a team is the aforementioned new upcoming version of the medialibrary. You can expect that one to drop somewhere Q1 2018.</p>
<h2 id="in-closing">In closing <a class='text-grey' href='#in-closing'>#</a></h2>
<p>Creating and working on open source packages continues to be a truly fun experience. On a technical level I’ve learned lots of things that I wouldn’t have learned when working solely on client projects. Like you’ve probably read between the lines, it also brings me great joy that my co-workers enjoy and appreciate the time given to work on our open source body of work.</p>
<p>I hope you’ve enjoyed the story behind our open source efforts. The big conclusion is that there are only winners in this story. If you are in a position in your company to advocate or to actively work on open source, I highly recommend you do so.</p>
<p>If you haven’t used our packages before, take a look at <a href="https://spatie.be/en/opensource">the list on our company website</a>. Probably we’ve made some things that could be useful to you.</p>]]>
            </summary>
            <updated>2018-01-05T14:33:19+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[17 Tips for Using Composer Efficiently]]></title>
            <link rel="alternate" href="https://murze.be/17-tips-for-using-composer-efficiently" />
            <id>https://murze.be/945</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://twitter.com/MartinHujer">Martin Hujer</a> shares some pretty good tips for working with Composer.</p>
<blockquote>
<p>Although most PHP developers know how to use Composer, not all of them are using it efficiently or in a best possible way. So I decided to summarize things which are important for my everyday workflow.</p>
<p>The philosophy of most of the tips is &quot;Play it safe&quot;, which means that if there are more ways how to handle something, I would use the approach which is least error-prone.</p>
</blockquote>
<p><a href="https://blog.martinhujer.cz/17-tips-for-using-composer-efficiently/">https://blog.martinhujer.cz/17-tips-for-using-composer-efficiently/</a></p>]]>
            </summary>
            <updated>2018-01-05T10:34:21+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Introducing Stimulus: Basecamp&#039;s new JavaScript framework]]></title>
            <link rel="alternate" href="https://murze.be/introducing-stimulus-basecamps-new-javascript-framework" />
            <id>https://murze.be/944</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://basecamp.com/">Basecamp</a> recently open source Stimulus, their new JS framework. It aims to make sprinkling some JavaScript on your page here an there very easy.</p>
<blockquote>
<p>Stimulus is a JavaScript framework with modest ambitions. It doesn't seek to take over your entire front-end—in fact, it's not concerned with rendering HTML at all. Instead, it's designed to augment your HTML with just enough behavior to make it shine. Stimulus pairs beautifully with Turbolinks to provide a complete solution for fast, compelling applications with a minimal amount of effort.</p>
</blockquote>
<p><a href="https://github.com/stimulusjs/stimulus">https://github.com/stimulusjs/stimulus</a></p>
<p><a href="https://twitter.com/dhh">DHH</a> talks a bit on why and how they created it in <a href="https://overcast.fm/+JIEyJUHvw">this episode of the Ruby Rogues podcast</a>.</p>]]>
            </summary>
            <updated>2018-01-05T10:28:35+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Server-Side Rendering With Laravel &amp; Vue]]></title>
            <link rel="alternate" href="https://murze.be/server-side-rendering-with-laravel-vue" />
            <id>https://murze.be/943</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>In a post on <a href="https://vuejsdevelopers.com">vuejsdevelopers.com</a> <a href="https://twitter.com/@anthonygore">Anthony Gore</a> explains how to get started with serverside rending with Laravel and Vue. Cool stuff!</p>
<blockquote>
<p>Server-side rendering is great way to increase the perception of loading speed in your full-stack app. Users get a complete page with visible content when they load your site, as opposed to an empty page that doesn’t get populated until JavaScript runs.</p>
<p>One of the downsides of using Laravel as a backend for Vue.js was the inability to server render your code. Was. The release of Vue.js 2.5.0 has brought server-side rendering support to non-Node.js environments including PHP, Python, Ruby etc.</p>
<p>In this tutorial, I’ll take you through the set up steps for Laravel and demonstrate a simple server-rendered app. Get the code for this here on Github.</p>
</blockquote>
<p><a href="https://vuejsdevelopers.com/2017/11/06/vue-js-laravel-server-side-rendering/">https://vuejsdevelopers.com/2017/11/06/vue-js-laravel-server-side-rendering/</a></p>]]>
            </summary>
            <updated>2018-01-04T19:48:49+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[spatie/async will be released soon]]></title>
            <link rel="alternate" href="https://murze.be/spatieasync-will-be-released-soon" />
            <id>https://murze.be/942</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>My colleague <a href="https://twitter.com/brendt_gd">Brent</a> is currently creating a new package called <a href="https://github.com/spatie/async">spatie/async</a>. This one will let you easily do some asynchronous parallel processing in PHP. In a new post on his blog Brent explains why we are creating the package and compares it to a few other solutions out there.</p>
<blockquote>
<p>If you're into parallel PHP, you probably heard of Amp and ReactPHP. Our package aims not to compete with those two, as it only solves one tiny aspect of parallelism in PHP.
We did however use both the packages to run some benchmarks against. Let's take a look at the results.</p>
</blockquote>
<p><a href="https://www.stitcher.io/blog/asynchronous-php">https://www.stitcher.io/blog/asynchronous-php</a></p>]]>
            </summary>
            <updated>2018-01-02T20:38:35+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Rainglow: a collection of beautiful handcrafted themes]]></title>
            <link rel="alternate" href="https://murze.be/rainglow-a-collection-of-beautiful-handcrafted-themes" />
            <id>https://murze.be/941</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://twitter.com/daylerees">Dayle Rees</a>, author of <a href="https://leanpub.com/u/daylerees">various popular books on PHP and Laravel</a>, has recently blown new life into his efforts of creating  IDE and terminal themes. He created themes for most of the popular apps out there including: PhpStorm, VS Code, Atom, iTerm2, ...</p>
<p>You can preview all the themes on: <a href="https://rainglow.io/">https://rainglow.io/</a></p>
<p>I've been using Dayle's <a href="https://murze.be/a-beautiful-phpstorm-theme">Material Peacock</a> for quite some time. Currently I'm digging white based themes and I'm on <a href="https://github.com/thenikso/github-plus-theme">the GitHub theme</a>.</p>
<p><img src="/uploads/media/rainglow/theme.png" alt="github theme screenshot" /></p>]]>
            </summary>
            <updated>2018-01-02T13:49:15+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Quickly responding with a 403 in a Laravel app]]></title>
            <link rel="alternate" href="https://murze.be/quickly-responding-with-a-403-in-a-laravel-app" />
            <id>https://murze.be/940</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">🔥 Sometimes you want quick on-the-fly authorization, without the hassle of registering a policy/callback at the Gate.<br><br>Laravel's HandlesAuthorization trait is perfect for this. Simply call the `deny()` method, and Laravel will respond with a 403 HTTP response 👌 <a href="https://t.co/O36agH2o3u">pic.twitter.com/O36agH2o3u</a></p>— Joseph Silber (@joseph_silber) <a href="https://twitter.com/joseph_silber/status/946444006057226241?ref_src=twsrc%5Etfw">December 28, 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]>
            </summary>
            <updated>2018-01-02T13:43:18+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Frontend in 2017: The important parts]]></title>
            <link rel="alternate" href="https://murze.be/frontend-in-2017-the-important-parts" />
            <id>https://murze.be/939</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://blog.logrocket.com/@eranimo">Kaelan Cooter</a>, software engineer at LogRocket, wrote a good post on the state of JavaScript and it's ecosystem in 2017. I'm very curious to see how WebAssembly will mature in the next year. There seems to be a lot of potential there.</p>
<blockquote>
<p>A lot has happened in 2017, and it can be a bit overwhelming to think about. We all like to joke about how quickly things change in frontend engineering, and for the last few years that has probably been true.</p>
<p>At this risk of sounding cliché, I’m here to tell you that this time it’s different.</p>
<p>Frontend trends are starting to stabilize — popular libraries have largely gotten more popular instead of being disrupted by competitors — and web development is starting to look pretty awesome.</p>
<p>In this post, I’ll summarize some of the important things that happened this year in the frontend ecosystem with an eye toward big-picture trends.</p>
</blockquote>
<p><a href="https://blog.logrocket.com/frontend-in-2017-the-important-parts-4548d085977f">https://blog.logrocket.com/frontend-in-2017-the-important-parts-4548d085977f</a></p>]]>
            </summary>
            <updated>2017-12-24T08:06:16+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Beautiful, organised results in PHPUnit]]></title>
            <link rel="alternate" href="https://murze.be/beautiful-organised-results-in-phpunit" />
            <id>https://murze.be/938</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Beautiful, organized results in PHPUnit, where have you been all my life? <br>Composer-install this bad boy, add one line to phpunit.xml, and enjoy the view. 😎<a href="https://t.co/JJi4tEhWWo">https://t.co/JJi4tEhWWo</a> <a href="https://t.co/4pndct3iZk">pic.twitter.com/4pndct3iZk</a></p>&mdash; Keith Damiani (@keithdamiani) <a href="https://twitter.com/keithdamiani/status/943947645361500160?ref_src=twsrc%5Etfw">December 21, 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]>
            </summary>
            <updated>2017-12-22T08:58:05+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Some interesting numbers about the PHP GitHub repos in 2017]]></title>
            <link rel="alternate" href="https://murze.be/some-interesting-numbers-about-the-php-github-repos-in-2017" />
            <id>https://murze.be/937</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://github.com/mpociot">Marcel Pociot</a>, author of <a href="botman.io">BotMan</a>, used GitHub and Google BigQuery to look up some interesting numbers about the PHP repos in 2017.</p>
<blockquote>
<p>It's this time of the year again - the end of the year is coming up fast, so why not step back and take a look at what we, as a PHP community, have achieved this year?</p>
<p>For these statistics, I used the free GitHub Archive data in combination with Google BigQuery, which lets you process 1TB of data per month free of charge.</p>
<p>So let's take a look at some numbers.</p>
</blockquote>
<p><a href="http://marcelpociot.de/blog/2017-12-21-a-php-year-in-review">http://marcelpociot.de/blog/2017-12-21-a-php-year-in-review</a></p>
<p>My team is mentioned in the article too. Pretty proud of this!</p>
<blockquote>
<p>As you can see, Spatie - a company doing a ton of open source projects - is on this list 16 times. Well done 👏 !</p>
</blockquote>]]>
            </summary>
            <updated>2017-12-21T18:33:14+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Making a case for letter case]]></title>
            <link rel="alternate" href="https://murze.be/making-a-case-for-letter-case" />
            <id>https://murze.be/936</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>In an older, but still relevant, post on Medium <a href="https://twitter.com/saitojohn">John Saito</a> demonstrates the effect of different capitalizations.</p>
<blockquote>
<p>Can you spot the differences with the messages above? The left side has a few more capital letters than the right side. Big O, little o. Who cares, right?</p>
<p>Well, if you write for an app or website, you should care. A little thing like capitalization can actually be a big deal. Capitalization affects readability, comprehension, and usability. It even impacts how people view your brand.</p>
<p>We’ll get to the juicy stuff in a bit, but first, let’s start with a little more background about capitalization.</p>
</blockquote>
<p><a href="https://medium.com/@jsaito/making-a-case-for-letter-case-19d09f653c98">https://medium.com/@jsaito/making-a-case-for-letter-case-19d09f653c98</a></p>]]>
            </summary>
            <updated>2017-12-19T17:45:38+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[★ An async map function]]></title>
            <link rel="alternate" href="https://murze.be/an-async-map-function" />
            <id>https://murze.be/935</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>Laravel has <a href="https://laravel.com/docs/5.5/collections">an excellent Collection class</a> that has <a href="https://laravel.com/docs/5.5/collections#available-methods">many useful operations</a>. The class is also <a href="https://laravel.com/docs/5.5/collections#extending-collections">macroable</a>. This means that you can add function to it at runtime by calling <code>macro</code> on it and passing a name and a closure. In our projects we tend to code up the same macro's over and over again. That's why we have put those macros in <a href="https://github.com/spatie/laravel-collection-macros">a package called laravel-collection-macros</a> so we, and the community, can reuse them. In this post I'd like to talk a bit about <a href="https://github.com/spatie/laravel-collection-macros#parallelmap">a new macro</a> that we added today called <code>parallelMap</code>.</p>
<p><code>parallelmap</code> is identical to map but each item in the collection will be processed in parallel. Let's take a look at an example:</p>
<pre><code class="language-php">$pageSources = collect($urls)-&gt;parallelMap(function($url) {
    return file_get_contents($url);
});</code></pre>
<p>The  content of the given <code>$urls</code> will be fetched at the same time. This will be much faster that fetching the content of one url after the other. Cool stuff!</p>
<p>Here's another piece of code taken from <a href="https://github.com/spatie/laravel-collection-macros/blob/master/tests/ParallelMapTest.php">our tests</a>:</p>
<pre><code class="language-php">/** @test */
public function it_can_perform_async_map_operations()
{
    $this-&gt;startStopWatch();

    $collection = Collection::make([1, 2, 3, 4, 5])-&gt;parallelMap(function (int $number) {
        sleep(1);

        return $number * 10;
    });

    $this-&gt;assertTookLessThanSeconds(2);

    $this-&gt;assertEquals([10, 20, 30, 40, 50], $collection-&gt;toArray());
}</code></pre>
<p>You're probably wondering how this magic works. Well, the hard part is done inside <a href="https://amphp.org/">Amp</a>'s new package called <a href="https://github.com/amphp/parallel-functions"><code>parallel-functions</code></a>. Here's a short description of what it does taken from <a href="https://amphp.org/parallel-functions/">their docs</a>:</p>
<blockquote>
<p>amphp/parallel-functions is a simplifying layer on top of amphp/parallel. It allows parallel code execution by leveraging threads or processes, depending on the installed extensions. All data sent to / received from the child processes / threads must be serializable using PHP’s <code>serialize()</code> function.</p>
</blockquote>
<p>Here's an example, again take from their docs, on how you can use the package directly:</p>
<pre><code>use Amp\Promise;
use function Amp\ParallelFunctions\parallelMap;

$values = Promise\wait(parallelMap([1, 2, 3], function ($time) {
    \sleep($time); // a blocking function call, might also do blocking I/O here

    return $time * $time;
}));</code></pre>
<p>The <code>parallelMap</code> macro in our package simply uses their magic. Here's the <a href="https://github.com/spatie/laravel-collection-macros/blob/b201b7a/src/macros/parallelMap.php">definition of the macro</a>:</p>
<pre><code class="language-php">Collection::macro('parallelMap', function (callable $callback): Collection {
    $promises = parallelMap($this-&gt;items, $callback);

    $this-&gt;items = wait($promises);

    return $this;
});</code></pre>
<p>Be aware that you shouldn't use <code>parallelMap</code> if the work done in the closure is very simple.  Using <code>parallelMap</code> causes quite some overhead and is memory intensive. Don't use this for small operations or on a large collection.</p>
<p>Thanks <a href="https://twitter.com/kelunik">Niklas Keller</a> for <a href="https://github.com/amphp/amp">Amp</a> and that wonderful <a href="https://github.com/amphp/parallel-functions"><code>amphp/parallel-functions</code></a>.</p>]]>
            </summary>
            <updated>2017-12-19T22:40:28+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[★ Laravel-medialibrary v7 preview: media collections]]></title>
            <link rel="alternate" href="https://murze.be/laravel-medialibrary-v7-preview-media-collections" />
            <id>https://murze.be/934</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://docs.spatie.be/laravel-medialibrary/">laravel-medialibrary</a> is a  package that can help handle media in a Laravel application. It can <a href="https://docs.spatie.be/laravel-medialibrary/v6/advanced-usage/working-with-multiple-filesystems">organise your files across multiple filesystems</a>, <a href="https://docs.spatie.be/laravel-medialibrary/v6/converting-images/defining-conversions">generate thumbnails</a>, <a href="https://docs.spatie.be/laravel-medialibrary/v6/converting-images/optimizing-converted-images">optimize images</a> and much much more. </p>
<p>Like mentioned before on this blog my team and I are currently creating a new major version, v7, that adds a lot of awesome features such as <a href="https://twitter.com/freekmurze/status/939161592725409796">responsive images</a>, vue components to assist with uploading, ... Last week you got a preview of <a href="/laravel-medialibrary-v7-preview-multi-file-downloads">multi file downloads</a>, ... This week we are going to look at some improvements to defining media collections.</p>
<h2 id="what-are-media-collections">What are media collections? <a class='text-grey' href='#what-are-media-collections'>#</a></h2>
<p>Media collections already exist in the current version of the medialibrary. They allow you to put different types of files in their own collection.</p>
<p>Let's associate some media:</p>
<pre><code class="language-php">$newsItem = News::find(1);
$newsItem-&gt;addMedia($pathToImage)-&gt;toMediaCollection('images');
$newsItem-&gt;addMedia($pathToAnotherImage)-&gt;toMediaCollection('images');
$newsItem-&gt;addMedia($pathToPdfFile)-&gt;toMediaCollection('downloads');
$newsItem-&gt;addMedia($pathToAnExcelFile)-&gt;toMediaCollection('downloads');</code></pre>
<p>All media in a specific collection can be retrieved like this:</p>
<pre><code class="language-php">// will return media instances for all files in the images collection
$newsItem-&gt;getMedia('images');

// will returns media instance for all files in the downloads collection
$newsItem-&gt;getMedia('downloads');</code></pre>
<h2 id="new-functionalities-in-v7">New functionalities in v7 <a class='text-grey' href='#new-functionalities-in-v7'>#</a></h2>
<p>In v7 a media collection can be more than just a name to group files. By defining a media collection in your model you can add certain behaviours to  collections.</p>
<p>To get started with media collections add a function called <code>registerMediaCollections</code> to <a href="https://docs.spatie.be/laravel-medialibrary/v7/basic-usage/preparing-your-model">your prepared model</a>. Inside that function you can use <code>addMediaCollection</code> to start  a media collection.</p>
<pre><code class="language-php">// in your model

public function registerMediaCollections()
{
    $this-&gt;addMediaCollection('my-collection')
        //add options
        ...

    // you can define as much collections as needed
    $this-&gt;addMediaCollection('my-other-collection')
        //add options
        ...
}</code></pre>
<h3 id="only-allow-certain-files-in-a-collection">Only allow certain files in a collection <a class='text-grey-light' href='#only-allow-certain-files-in-a-collection'>#</a></h3>
<p>You can pass a callback to <code>acceptsFile</code> that will check if a file is allowed into the collection. In this example we only accept <code>jpeg</code> files:</p>
<pre><code class="language-php">use Spatie\MediaLibrary\File;
...
public function registerMediaCollections()
{
    $this
        -&gt;addMediaCollection('only-jpegs-please')
        -&gt;acceptsFile(function (File $file) {
            return $file-&gt;mimeType === 'image/jpeg';
        });
}</code></pre>
<p>This will succeed:</p>
<pre><code class="language-php">$yourModel-&gt;addMedia('beautiful.jpg')-&gt;toMediaCollection('only-jpegs-please');</code></pre>
<p>This will throw a <code>Spatie\MediaLibrary\Exceptions\FileCannotBeAdded\FileUnacceptableForCollection</code> exception:</p>
<pre><code class="language-php">$yourModel-&gt;addMedia('ugly.ppt')-&gt;toMediaCollection('only-jpegs-please');</code></pre>
<h3 id="using-a-specific-disk">Using a specific disk <a class='text-grey-light' href='#using-a-specific-disk'>#</a></h3>
<p>You can ensure that files added to a collection are automatically added to a certain disk.</p>
<pre><code class="language-php">// in your model

public function registerMediaCollections()
{
    $this
       -&gt;addMediaCollection('big-files')
       -&gt;useDisk('s3');
}</code></pre>
<p>When adding a file to <code>my-collection</code> it will be stored on the <code>s3</code> disk.</p>
<pre><code class="language-php">$yourModel-&gt;addMedia($pathToFile)-&gt;toMediaCollection('big-files');</code></pre>
<p>You can still specify the disk name manually when adding media. In this example the file will be stored on <code>alternative-disk</code> instead of <code>s3</code>.</p>
<pre><code class="language-php">$yourModel-&gt;addMedia($pathToFile)-&gt;toMediaCollection('big-files', 'alternative-disk');</code></pre>
<h3 id="single-file-collections">Single file collections <a class='text-grey-light' href='#single-file-collections'>#</a></h3>
<p>If you want a collection to hold only one file you can use <code>singleFile</code> on the collection. A good use case for this would be an avatar collection on a <code>User</code> model. In most cases you'd want to have a user to only have one <code>avatar</code>.</p>
<pre><code class="language-php">// in your model

public function registerMediaCollections()
{
    $this
        -&gt;addMediaCollection('avatar')
        -&gt;singleFile();
}</code></pre>
<p>The first time you add a file to the collection it will be stored as usual.</p>
<pre><code class="language-php">$yourModel-&gt;add($pathToImage)-&gt;toMediaCollection('avatar');
$yourModel-&gt;getMedia('avatar')-&gt;count(); // returns 1
$yourModel-&gt;getFirstUrl('avatar'); // will return an url to the `$pathToImage` file</code></pre>
<p>When adding another file to a single file collection the first one will be deleted.</p>
<pre><code class="language-php">// this will remove other files in the collection
$yourModel-&gt;add($anotherPathToImage)-&gt;toMediaCollection('avatar');
$yourModel-&gt;getMedia('avatar')-&gt;count(); // returns 1
$yourModel-&gt;getFirstUrl('avatar'); // will return an url to the `$anotherPathToImage` file</code></pre>
<h3 id="registering-media-conversions">Registering media conversions <a class='text-grey-light' href='#registering-media-conversions'>#</a></h3>
<p>It's recommended that your first read the section on <a href="https://docs.spatie.be/laravel-medialibrary/v7/converting-images/defining-conversions">converting images</a> before reading the following paragraphs.</p>
<p>Normally image conversions are registered inside the <code>registerMediaConversions</code> function on your model. However, images conversions can also be registered inside media collections.</p>
<pre><code class="language-php">public function registerMediaCollections()
{
    $this
        -&gt;addMediaCollection('my-collection')
        -&gt;registerMediaConversions(function (Media $media) {
            $this
                -&gt;addMediaConversion('thumb')
                -&gt;width(100)
                -&gt;height(100);
        });
}</code></pre>
<p>When adding an image to <code>my-collection</code> a thumbnail that fits inside 100x100 will be created.</p>
<pre><code class="language-php">$yourModel-&gt;add($pathToImage)-&gt;toMediaCollection('my-collection');

$yourModel-&gt;getFirstMediaUrl('thumb') // returns an url to a 100x100 version of the added image.</code></pre>
<p>Take a look at the <a href="/laravel-medialibrary/v7/converting-images/defining-conversions">defining conversions section</a> to learn all the functions you can tack on to <code>addMediaConversion</code>.</p>
<h2 id="in-closing">In closing <a class='text-grey' href='#in-closing'>#</a></h2>
<p>These improvements are coming to v7 of laravel-medialibrary. v7 will probably be released around February - March 2018.  Of course you can start using <a href="https://docs.spatie.be/laravel-medialibrary/v6/">v6 of laravel-medialibrary</a> right now.</p>]]>
            </summary>
            <updated>2017-12-18T07:33:31+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[My VS Code Setup]]></title>
            <link rel="alternate" href="https://murze.be/my-vs-code-setup" />
            <id>https://murze.be/933</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>In an absolutely fantastic post <a href="https://twitter.com/calebporzio">Caleb Porzio</a>, engineer at <a href="https://tighten.co/">Tighten Co.</a>, goes through his <a href="https://code.visualstudio.com/">VS Code</a> setup. He goes over his extensions, key bindings, must-have settings, ...</p>
<blockquote>
<p>I’m using VS Code as my primary editor these days and am really digging it. My setup is by no means perfect, but I've made lots of little tweaks along the way that you may benefit from.
I've set up these nifty categories, so feel free to jump around and try stuff out as you go, or come back later and use it as a reference.</p>
</blockquote>
<p><a href="http://calebporzio.com/my-vs-code-setup-2/">http://calebporzio.com/my-vs-code-setup-2/</a></p>
<p>I've made the switch from PhpStorm to VS Code a couple of weeks ago and have been using it ever since. I like the speed improvements over PhpStorm, the zen feel, the xdebug experience, ... It just feels lighter (and I mean that in a good way) compared to PhpStorm. </p>
<p>If you want to give VS Code a shot too, go watch the <a href="https://laracasts.com/series/visual-studio-code-for-php-developers">free Visual Studio Code for PHP developers course on Laracasts</a>.</p>]]>
            </summary>
            <updated>2017-12-13T20:29:27+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[★ Laravel-medialibrary v7 preview: multi file downloads]]></title>
            <link rel="alternate" href="https://murze.be/laravel-medialibrary-v7-preview-multi-file-downloads" />
            <id>https://murze.be/930</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://docs.spatie.be/laravel-medialibrary/">laravel-medialibrary</a> is a powerhouse package that can help handle media in a Laravel application. It can <a href="https://docs.spatie.be/laravel-medialibrary/v6/advanced-usage/working-with-multiple-filesystems">organise your files across multiple filesystems</a>, <a href="https://docs.spatie.be/laravel-medialibrary/v6/converting-images/defining-conversions">generate thumbnails</a>, <a href="https://docs.spatie.be/laravel-medialibrary/v6/converting-images/optimizing-converted-images">optimize images</a> and much much more. </p>
<p>My team and I are hard at work creating a new major version, v7, that adds a lot of awesome features such as <a href="https://twitter.com/freekmurze/status/939161592725409796">responsive images</a>, vue components to assist with uploading, single file collections, ... In this post I'd like to highlight one cool handy feature that's coming to v7: multi file downloads.</p>
<p>In our package every file is associated with a <code>Media</code> model. To download a single file you can do this in a controller:</p>
<pre><code class="language-php">public function download(Media $media) 
{
   return response()-&gt;download($media-&gt;getPath());
}</code></pre>
<p>Because <code>Media</code> <a href="https://github.com/spatie/laravel-medialibrary/blob/ac8b8df1d2266260a20dc181b528050e09b1c9b4/src/Media.php#L236-L242">implements</a> <a href="https://laravel-news.com/laravel-5-5-responsable">Laravel's Responsable interface</a> you can also write that a bit shorter:</p>
<pre><code class="language-php">public function download(Media $media) 
{
   return $media;
}</code></pre>
<p>Pretty sweet! But what if you want to download multiple files at once? Currently the medialibrary won't help you with this and you need to take care of this yourself. You could generate a zip file with all media you want to download on your server and then do</p>
<pre><code class="language-php">return response()-&gt;download($pathToZippedMediaFiles);</code></pre>
<p>But maybe you want to download big files, in that case creating the zip takes a while. Or maybe the files are stored on a remote service like S3, so now it takes even longer because the files need to be copied over first.</p>
<p>I'm happy to share that medialibrary v7 will solve this for you. It includes a <code>ZipStreamResponse</code> class that allows you to respond with a stream. Files will be zipped on the fly and you can even include files from multiple filesystems.</p>
<p>Let's take a look at an example on how to use <code>ZipStreamResponse</code>. We're going to create two routes. Visiting <code>add-files</code> will add some files to our medialibrary, visiting <code>download-files</code> will download them. I'm using routes here for demonstration purposes, in a real world app you'd probably use <code>ZipStreamResponse</code> in a controller.</p>
<pre><code class="language-php">Route::get('add-files', function() {
    //create a regular model
    $article = Article::create();

    // add a file to the downloads collection on the local disk
    $article
        -&gt;addMedia($pathToAFile)
        -&gt;toMediaCollection('downloads');

    // add a file to the downloads collection on the s3 disk
    $article
    -&gt;addMedia($pathToABigFile)
    -&gt;toMediaCollection('downloads', 's3');

    return 'files added!';
});

Route::get('download-files', function() {
    //get all files in the download collection
    $allMedia = Article::first()-&gt;getMedia('downloads');

    // download them in a streamed way, so no prob if your files are very large
    return ZipStreamResponse::create('my-files.zip')-&gt;addMedia($allMedia);
});</code></pre>
<p>That last line is the most important one. It's kinda cool that the zip is created on the fly and that it pulls data from both the local disk and s3.</p>
<p>Coding <code>ZipStreamResponse</code> up was easier than I thought it would be. The <a href="https://github.com/maennchen/ZipStream-PHP">maennchen/zipstream-php</a> does the hard work of creating a zip stream. All I need to do was to integrate the provided <code>ZipStream</code> class in our medialibrary. Here's the entire source code of <code>Spatie\MediaLibrary\ZipStreamResponse</code>:</p>
<pre><code class="language-php">namespace Spatie\MediaLibrary;

use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Contracts\Support\Responsable;
use Spatie\MediaLibrary\Media;
use Symfony\Component\HttpFoundation\StreamedResponse;
use ZipStream\ZipStream;

class ZipStreamResponse implements Responsable
{
    /** string */
    protected $zipName;

    /** Illuminate\Support\Collection */
    protected $mediaItems;

    public static function create(string $zipName)
    {
        return new static($zipName);
    }

    public function __construct(string $zipName)
    {
        $this-&gt;zipName = $zipName;
    }

    public function addMedia($mediaItems)
    {
        $this-&gt;mediaItems = $mediaItems;

        return $this;
    }

    public function toResponse($request)
    {
        return new StreamedZipResponse(function () {
            $zip = new ZipStream($this-&gt;zipName);

            $this-&gt;mediaItems-&gt;each(function (Media $media) use ($zip) {
                $zip-&gt;addFileFromStream($media-&gt;file_name, $media-&gt;stream());
            });

            $zip-&gt;finish();
        });
    }
}</code></pre>
<p>Of course there are situations (eg. when the same assets get downloaded over and over again, or when download speed is very important) where you still want to create a zip file locally and store it for later use. But I believe <code>StreamedZipResponse</code> does provide a good solution for the proverbial 80%</p>
<p>Like mentioned above, multi file downloads are coming to <a href="https://github.com/spatie/laravel-medialibrary/tree/v7">v7 of laravel-medialibrary</a> which will be released around February - March 2018. Of course you can start using <a href="https://docs.spatie.be/laravel-medialibrary/v6/">v6 of laravel-medialibrary</a> right now.</p>]]>
            </summary>
            <updated>2017-12-12T08:20:29+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Installing PHP 7.2]]></title>
            <link rel="alternate" href="https://murze.be/installing-php-72" />
            <id>https://murze.be/922</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>PHP 7.2 was <a href="https://twitter.com/official_php/status/936280741784141825">released last</a> week. Here's <a href="https://blog.martinhujer.cz/php-7-2-is-due-in-november-whats-new/">a nice post</a> highlighting the most important changes. If you want to know how to install PHP 7.2 on your system, <a href="https://twitter.com/colinodell">Colin O' Dell</a> has got you covered.</p>
<blockquote>
<p>PHP 7.2 has been released, bringing some great new features and security enhancements to the language such as object type hints, saner count() behavior, and much more. Here's a brief guide on how to install PHP 7.2 on several different operating systems.</p>
</blockquote>
<p><a href="https://www.colinodell.com/blog/201711/installing-php-72">https://www.colinodell.com/blog/201711/installing-php-72</a></p>
<p>Using brew on MacOS it's very easy to upgrade from PHP 7.1 to PHP 7.2. Just run these:</p>
<pre><code>brew update
brew upgrade
brew unlink php71
brew install php72</code></pre>
<p>Please be aware that, at the moment of writing, there isn't a stable xdebug version that works for PHP 7.2. Keep an eye on <a href="https://xdebug.org/">the xdebug homepage</a> to know when a stable version drops.</p>]]>
            </summary>
            <updated>2017-12-12T08:35:18+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Run multiple processes concurrently with async/await]]></title>
            <link rel="alternate" href="https://murze.be/run-multiple-processes-concurrently-with-asyncawait" />
            <id>https://murze.be/932</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Tip: With async/await, you can run multiple async operations in parallel. How? Put the await statements on the same line! Works like promise.all. <a href="https://t.co/0aoAAvILmE">https://t.co/0aoAAvILmE</a><a href="https://twitter.com/hashtag/javascript?src=hash&amp;ref_src=twsrc%5Etfw">#javascript</a> <a href="https://t.co/RMrXKp8D7V">pic.twitter.com/RMrXKp8D7V</a></p>&mdash; Cory House 🏠 (@housecor) <a href="https://twitter.com/housecor/status/930108010558640128?ref_src=twsrc%5Etfw">November 13, 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]>
            </summary>
            <updated>2017-12-12T08:28:35+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Selecting the entire variable in VS Code]]></title>
            <link rel="alternate" href="https://murze.be/selecting-the-entire-variable-in-vs-code" />
            <id>https://murze.be/931</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Using <a href="https://twitter.com/code?ref_src=twsrc%5Etfw">@code</a> and <a href="https://twitter.com/hashtag/PHP?src=hash&amp;ref_src=twsrc%5Etfw">#PHP</a> ? Considering removing $ from the editor.wordSeparators setting. That way you’ll select the entire variable (including $) when double clicking on one.<br><br>Thanks for the tip <a href="https://twitter.com/sebdedeyne?ref_src=twsrc%5Etfw">@sebdedeyne</a> <a href="https://t.co/RGcaCd74pE">pic.twitter.com/RGcaCd74pE</a></p>&mdash; Freek Van der Herten (@freekmurze) <a href="https://twitter.com/freekmurze/status/938428037112188931?ref_src=twsrc%5Etfw">December 6, 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]>
            </summary>
            <updated>2017-12-12T08:15:38+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Understand JavaScript&#039;s this Keyword in Depth]]></title>
            <link rel="alternate" href="https://murze.be/understand-javascripts-this-keyword-in-depth" />
            <id>https://murze.be/928</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://twitter.com/mariusschulz">Marius Schulz</a> created a free Egghead course where he explains how JavaScript <code>this</code> keyword behaves in various contexts.</p>
<blockquote>
<p>JavaScript’s this keyword is a source of confusion for many new and experienced developers alike. It can be frustrating if, for some reason, this doesn’t point to the context that was intended. This course will help you understand JavaScript’s this mechanism in depth.</p>
</blockquote>
<p><a href="https://egghead.io/courses/understand-javascript-s-this-keyword-in-depth">https://egghead.io/courses/understand-javascript-s-this-keyword-in-depth</a></p>]]>
            </summary>
            <updated>2017-12-11T21:40:20+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Create custom, distributable web components with VueJS]]></title>
            <link rel="alternate" href="https://murze.be/create-custom-distributable-web-components-with-vuejs" />
            <id>https://murze.be/927</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://twitter.com/marcelpociot">Marcel Pociot</a>, author of the excellent <a href="https://botman.io/">BotMan</a> package, published a post on how he used <a href="https://github.com/karol-f/vue-custom-element">Custom Elements for VueJS</a> to power a widget that users can embed on their sites.</p>
<blockquote>
<p>I am currently in the middle of working on a new BotMan feature - a frontend widget that you can embed into your website to make it easier to connect your website visitors with your own self-hosted chatbot solution. The backend / PHP side is already working and leverages the BotMan web driver, which is basically just an API that you can use to interact with your chatbot.</p>
</blockquote>
<p><a href="http://marcelpociot.de/blog/2017-12-08-using-custom-vuejs-elements">http://marcelpociot.de/blog/2017-12-08-using-custom-vuejs-elements</a></p>]]>
            </summary>
            <updated>2017-12-11T21:32:22+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[24 Days in December: thoughts of the PHPamily]]></title>
            <link rel="alternate" href="https://murze.be/24-days-in-december-thoughts-of-the-phpamily" />
            <id>https://murze.be/926</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://24daysindecember.net/">24 days in december</a> is a site where every day, from start of December until Christmas, a new post by someone in the wide PHP community is published. The blog authors are hand picked by <a href="https://twitter.com/heiglandreas">Andreas Heigl</a> who runs the site. Here's an excerpt of the post by <a href="https://twitter.com/Kalle_">Kalle Sommer Nielsen</a> that was published to today.</p>
<blockquote>
<p>PHP has a tremendous community behind it, that community consists of you and me, and millions of others that help promote PHP by continuing to develop awesome applications that power some of the biggest websites in the world, but within this community exists a relatively small community that actively develops PHP, such as making it run on your favorite platform or making your favorite extensions compile and work or even keeps the documentation up-to-date. Today I want to dwell into that community, and perhaps giving you flavor enough to contribute back to PHP with code</p>
</blockquote>
<p><a href="https://24daysindecember.net/2017/12/11/giving-back-to-php/">https://24daysindecember.net/2017/12/11/giving-back-to-php/</a></p>
<p>Be sure to check out the posts by <a href="https://24daysindecember.net/2017/12/07/php-is-the-best/">Morten Bergset</a>, <a href="https://twitter.com/asgrim">James Titcumb</a>, <a href="https://24daysindecember.net/2017/12/06/an-ode-to-phps-unsung-heros/">Juliette Reinders Folmer</a> and all others too.</p>]]>
            </summary>
            <updated>2017-12-11T21:22:39+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Organizing code into domain modules]]></title>
            <link rel="alternate" href="https://murze.be/organizing-code-into-domain-modules" />
            <id>https://murze.be/925</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>In a new post to his site Mathieu Napoli makes the case for organising your code based on it's function rather than it's type.</p>
<blockquote>
<p>We recently discussed 2 topics seemingly unrelated with my colleagues at Wizaplace: how to organize code? How to organize teams?
...
Organizing code into domain modules is not a silver bullet but it forces to better understand the problem we are solving and better structure our code.</p>
</blockquote>
<p><a href="http://mnapoli.fr/organizing-code-into-domain-modules/">http://mnapoli.fr/organizing-code-into-domain-modules/</a></p>]]>
            </summary>
            <updated>2017-12-11T21:02:34+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Atomic commits: telling stories with Git]]></title>
            <link rel="alternate" href="https://murze.be/atomic-commits-telling-stories-with-git" />
            <id>https://murze.be/924</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="http://twitter.com/maybefrederick">Frederick Vanbrabant</a> published another delirious rant on his blog. This time it's about atomic commits.</p>
<blockquote>
<p>Atomic commits, sometimes also called micro commits, is the practice of explaining your thought process in the form of commit messages and code. It comes down to documenting the way to the solution.</p>
</blockquote>
<p><a href="https://frederickvanbrabant.com/2017/12/07/atomic-commits.html">https://frederickvanbrabant.com/2017/12/07/atomic-commits.html</a></p>]]>
            </summary>
            <updated>2017-12-07T18:26:26+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Symfony 4: New Hope]]></title>
            <link rel="alternate" href="https://murze.be/symfony-4-new-hope" />
            <id>https://murze.be/923</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>In an article on his Medium blog, <a href="https://twitter.com/jerzy_zawadzki">Jerzy Zawadzki</a> wrote about the most important changes made in Symfony 4.</p>
<blockquote>
<p>Internally, Symfony 4.0 is “just” Symfony 3.4 with removed depracations.
But from outside there is a big leap forward. Most changes (from the installation process, directory structe through using bundles, to coding itself) were made to improve Developer Experience with the framework.
Such system like Symfony, which can be used to create web apps as easily as to build other frameworks on top of it, must be complicated. But, as Symfony proves in new version, this complexity may be ‘hidden’ from the developer eyes.</p>
</blockquote>
<p><a href="https://medium.com/@zawadzki.jerzy/symfony-4-new-hope-dbf99dde91d8">https://medium.com/@zawadzki.jerzy/symfony-4-new-hope-dbf99dde91d8</a></p>]]>
            </summary>
            <updated>2017-12-05T14:33:36+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[★ Symfony now has an improved dump function]]></title>
            <link rel="alternate" href="https://murze.be/symfony-now-has-an-improved-dump-function" />
            <id>https://murze.be/920</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>Let's talk a little bit about Symfony's <code>dump</code> function. It's part of <a href="http://symfony.com/doc/current/components/var_dumper.html">their VarDumper component</a>. The function can dump a variable to the screen or browser in a nicer format than PHP's native <code>var_dump</code>. In the recently released Symfony 3.4 and Symfony 4 the function got a nice little improvement that I'd like to highlight in this post.</p>
<p>You probably already know that you can dump stuff like this:</p>
<pre><code class="language-php">dump($object);</code></pre>
<p>Nothing too fancy. But if you did this in previous versions of the framework it would blow up:</p>
<pre><code class="language-php">// dump didn't return anything so method is getting called on null ☠️
dump($object)-&gt;method();</code></pre>
<p>I was quite annoyed with this so I submitted <a href="https://github.com/symfony/symfony/pull/24280">a PR</a> to Symfony that let <code>dump</code> return the things that it was given. So now you can just wrap the function around any variable even if there are methods being called on it.</p>
<pre><code class="language-php">// in Symfony 3.4 and 4.x this just works 🤘
dump($object)-&gt;method();</code></pre>
<p>When dumping multiple things, they all get returned. So you could dump all arguments passed to a function like this.</p>
<pre><code class="language-php">$object-&gt;method(...dump($arg1, $arg2, $arg3));</code></pre>
<p>If you are using Laravel you'll be happy to know that Laravel just uses Symfony's <code>dump</code> function, so you can make use of this little improvement in Laravel too.</p>
<p>Happy dumping! 💩</p>]]>
            </summary>
            <updated>2017-12-04T11:47:17+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Symmetry is a hallmark of clean code]]></title>
            <link rel="alternate" href="https://murze.be/symmetry-is-a-hallmark-of-clean-code" />
            <id>https://murze.be/921</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">🔥 Symmetry is a hallmark of clean code. Symmetrical code is not only easy to read, but also predictable. Here are a few areas to check your code for symmetry. <a href="https://t.co/jGVdR0aek7">pic.twitter.com/jGVdR0aek7</a></p>— Jason McCreary (@gonedark) <a href="https://twitter.com/gonedark/status/936275444420268032?ref_src=twsrc%5Etfw">November 30, 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]>
            </summary>
            <updated>2017-12-04T19:37:26+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Copying objects in Chrome DevTools]]></title>
            <link rel="alternate" href="https://murze.be/copying-objects-in-chrome-devtools" />
            <id>https://murze.be/919</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">The <a href="https://twitter.com/ChromeDevTools?ref_src=twsrc%5Etfw">@ChromeDevTools</a> now let you copy an object directly to the clipboard, and it’ll automatically be converted to JSON 👏 <a href="https://t.co/yBv3QjbmRc">https://t.co/yBv3QjbmRc</a> <a href="https://t.co/Tb6LHRf5qz">pic.twitter.com/Tb6LHRf5qz</a></p>&mdash; Joseph Silber (@joseph_silber) <a href="https://twitter.com/joseph_silber/status/936227808837332993?ref_src=twsrc%5Etfw">November 30, 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]>
            </summary>
            <updated>2017-11-30T18:57:48+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[A package to use optimised UUIDs in Laravel]]></title>
            <link rel="alternate" href="https://murze.be/a-package-to-use-optimised-uuids-in-laravel" />
            <id>https://murze.be/918</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>Using regular UUIDs stored as a text-based primary key is very slow. Our newly released package <a href="https://github.com/spatie/laravel-binary-uuid">spatie/laravel-binary-uuid</a> aims to solve that by binary storing a slightly tweaked version of the UUID.  My colleague <a href="https://twitter.com/brendt_gd">Brent</a> wrote a blogpost describing how it works behind the scenes. He also included some interesting benchmarks.</p>
<blockquote>
<p>The binary encoding of UUIDs solved most of the issue. There's one extra step to take though, which allows MySQL to even better index this field. By switching some of the bits in the UUID, more specifically time related data, we're able to save them in a more ordered way. And it seems that MySQL is especially fond of ordered data when creating indices.</p>
</blockquote>
<p><a href="https://www.stitcher.io/blog/optimised-uuids-in-mysql">https://www.stitcher.io/blog/optimised-uuids-in-mysql</a></p>]]>
            </summary>
            <updated>2017-11-30T08:16:25+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[★ 🎂 murze.be turns three 🎂]]></title>
            <link rel="alternate" href="https://murze.be/murzebe-turns-three" />
            <id>https://murze.be/917</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>Three years ago I <a href="https://murze.be/a-board-game-that-teaches-four-year-olds-how-to-code">started this blog</a> to share my bookmarks and interesting links with fellow developers. Like on the <a href="https://murze.be/this-blog-is-one-year-old">previous</a> <a href="https://murze.be/murzebe-is-two-years-old">anniversaries</a> I'd like to share some cool statistics from the past 12 months.</p>
<p>For the period spanning from end november 2016 until end november 2017 my little blog served 591 113 pages. That's a pretty nice increase compared to the 397 030 pages from 2015-2016.</p>
<p>These were the most popular posts from 2017:</p>
<ol>
<li><a href="https://murze.be/building-a-realtime-dashboard-powered-by-laravel-and-vue-2017-edition">Building a realtime dashboard powered by Laravel and Vue (2017 edition)</a></li>
<li><a href="https://murze.be/an-easy-to-use-server-monitor-written-in-php">An easy to use server monitor written in PHP</a></li>
<li><a href="https://murze.be/packages-that-make-developing-laravel-apps-easier">Packages that make developing Laravel apps easier</a></li>
<li><a href="https://murze.be/using-varnish-on-a-laravel-forge-provisioned-server">Using Varnish on a Laravel Forge provisioned server</a></li>
<li><a href="https://murze.be/introducing-browsershot-v3-the-best-way-to-convert-html-to-pdfs-and-images">Introducing Browsershot v3: the best way to convert html to PDFs and images</a></li>
<li><a href="https://murze.be/a-beautiful-webapp-to-fetch-dns-records">A beautiful webapp to fetch dns records</a></li>
<li><a href="https://murze.be/easily-optimize-images-using-php-and-some-binaries">Easily optimize images using PHP (and some binaries)</a></li>
<li><a href="https://murze.be/setting-up-xdebug-with-laravel-valet">Setting up Xdebug with Laravel Valet</a></li>
<li><a href="https://murze.be/an-easy-way-to-validate-front-end-forms-using-back-end-logic">An easy way to validate front end forms using back end logic</a></li>
<li><a href="https://murze.be/a-package-to-easily-manipulate-images-in-php">A package to easily manipulate images in PHP</a></li>
</ol>
<p>Regular readers have also noticed that recently I swapped out WordPress in favor of a custom built Laravel application. Read <a href="https://murze.be/on-migrating-my-blog-from-wordpress-to-a-laravel-application">this post</a> if you want to know more about that.</p>
<p>In 2016 I started sending out <a href="/newsletter">a bi-weekly newsletter</a> containing all articles posted on this blog. I'm very happy to share that the list now has 3 787 subscribers. Mid 2017 I added text based ads to the newsletter. Though I was afraid of unhappy subscribers I literally received zero complaints. Interested in placing an ad? Here's <a href="/advertising">some more info</a>.</p>
<p>Dear reader, I hope you still enjoy reading the content on this blog as much as I like writing it. If you have suggestions on making this blog better, be sure to let me know.</p>]]>
            </summary>
            <updated>2018-01-06T09:07:55+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[A collection of Tailwind components]]></title>
            <link rel="alternate" href="https://murze.be/a-collection-of-tailwind-components" />
            <id>https://murze.be/916</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://tailwindcss.com/">Tailwind CSS</a> is a kick-ass utility first CSS framework. Though the documentation contains <a href="https://tailwindcss.com/docs/examples/alerts">some nice examples</a>, you might want to some more examples. You'll be happy to know that <a href="https://twitter.com/killgt">Agustin Rodríguez</a> created a site with some nice components built by the community.</p>
<p><a href="https://tailwindcomponents.com">https://tailwindcomponents.com</a></p>]]>
            </summary>
            <updated>2017-11-28T18:56:42+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Easily download files from cloud storage in a Laravel app]]></title>
            <link rel="alternate" href="https://murze.be/easily-download-files-from-cloud-storage-in-a-laravel-app" />
            <id>https://murze.be/915</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">💾 Returning files from your cloud storage (or any other filesystem) as responses just got much easier in <a href="https://twitter.com/laravelphp?ref_src=twsrc%5Etfw">@laravelphp</a> with the v5.5.22 release. Just return Storage::response($path) or Storage::download($path) and it will take care of it for you! 🎉<a href="https://t.co/xf8PxLYvFA">https://t.co/xf8PxLYvFA</a> <a href="https://t.co/tHZJNxgzN1">pic.twitter.com/tHZJNxgzN1</a></p>&mdash; Jonathan Reinink (@reinink) <a href="https://twitter.com/reinink/status/935498515039576064?ref_src=twsrc%5Etfw">28 november 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]>
            </summary>
            <updated>2017-11-28T18:49:17+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Native HTML5 form validation in 6 lines of code]]></title>
            <link rel="alternate" href="https://murze.be/native-html5-form-validation-in-6-lines-of-code" />
            <id>https://murze.be/914</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://twitter.com/davatron5000">Dave Rupert</a>, lead developer at <a href="http://paravelinc.com/">Paravel</a>, shows how you can leverage native form validation and still style your errors using only a couple of lines of JavaScript.</p>
<blockquote>
<p>If you’ve ever experimented with HTML5 Form Validation, you’ve probably been disappointed. The out-of-box experience isn’t quite what you want. Adding the required attribute to inputs works wonderfully. However the styling portion with input:invalid sorta sucks because empty inputs are trigger the :invalid state, even before the user has interacted with the page.
I finally sat down and spent a couple days trying to make HTML5 Form Validation work the way I want it.</p>
</blockquote>
<p><a href="https://daverupert.com/2017/11/happier-html5-forms/">https://daverupert.com/2017/11/happier-html5-forms/</a></p>]]>
            </summary>
            <updated>2017-11-27T20:00:09+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[An approach to testing middleware]]></title>
            <link rel="alternate" href="https://murze.be/an-approach-to-testing-middleware" />
            <id>https://murze.be/913</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>Laravel rockstar <a href="https://twitter.com/sixliv3">TJ Miller</a> posted a short and sweet post how how he tested a middleware that forces requests to respond with JSON.</p>
<blockquote>
<p>So what I’ve done here is define custom testing routes and applied the middleware as I would use it in the application routes, in this case global middleware and as middleware for the api group. This allows me to assert that the middleware is configured and functioning correctly.</p>
</blockquote>
<p><a href="https://medium.com/@sixlive/an-approach-to-testing-middleware-c547fc942848"><a href="https://medium.com/@sixlive/an-approach-to-testing-middleware-c547fc942848">https://medium.com/@sixlive/an-approach-to-testing-middleware-c547fc942848</a></a></p>]]>
            </summary>
            <updated>2017-11-27T19:30:01+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[How to Read Big Files with PHP (Without Killing Your Server)]]></title>
            <link rel="alternate" href="https://murze.be/how-to-read-big-files-with-php-without-killing-your-server" />
            <id>https://murze.be/912</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>In a new blogpost published at Sitepoint, <a href="https://github.com/assertchris">Christopher Pitt</a> explores the various ways you can handle reading big files in PHP.</p>
<blockquote>
<p>Though this isn’t a problem we frequently suffer from, it’s easy to mess up when working with large files. In asynchronous applications, it’s just as easy to bring the whole server down when we’re not careful about memory usage.</p>
<p>This tutorial has hopefully introduced you to a few new ideas (or refreshed your memory about them), so that you can think more about how to read and write large files efficiently. When we start to become familiar with streams and generators, and stop using functions like file_get_contents: an entire category of errors disappear from our applications. That seems like a good thing to aim for!</p>
</blockquote>
<p><a href="https://www.sitepoint.com/performant-reading-big-files-php/"><a href="https://www.sitepoint.com/performant-reading-big-files-php/">https://www.sitepoint.com/performant-reading-big-files-php/</a></a></p>]]>
            </summary>
            <updated>2017-11-23T22:18:55+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Anatomy of a PHP Hack]]></title>
            <link rel="alternate" href="https://murze.be/anatomy-of-a-php-hack" />
            <id>https://murze.be/907</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://twitter.com/aaronsaray">Aaron Saray</a> recently found some rogue code on a hacked website and investigated what it actually does. </p>
<blockquote>
<p>It’s hard to come up with a title for this - but - basically I found some rogue code the other day that I thought was pretty interesting. I was fixing a “hacked” website when I came across the source of the symptoms of the hack. </p>
<p>This obfuscated code is doing something bad, but we don’t know what at first glance. Obviously, the solution is to remove it - but - aren’t you a little curious what it was doing? Let’s take a look.</p>
</blockquote>
<p><a href="https://aaronsaray.com/2017/anatomy-of-a-php-hack.html"><a href="https://aaronsaray.com/2017/anatomy-of-a-php-hack.html">https://aaronsaray.com/2017/anatomy-of-a-php-hack.html</a></a></p>]]>
            </summary>
            <updated>2017-11-24T22:26:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[The Cost Of JavaScript]]></title>
            <link rel="alternate" href="https://murze.be/the-cost-of-javascript" />
            <id>https://murze.be/911</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>Probably you know that that keeping the disk &amp; transfer size of a JavaScript file low is pretty important. But have you  considered the time needed to parse and compile the code? In this great post on Medium <a href="https://twitter.com/addyosmani">Addy Osmani</a>, an engineer at Google, explains the complete cost of having JavaScript on your page.</p>
<blockquote>
<p>As we build sites more heavily reliant on JavaScript, we sometimes pay for what we send down in ways that we can’t always easily see. In this post, I’ll cover why a little discipline can help if you’d like your site to load &amp; be interactive quickly on mobile devices.
tl;dr: less code = less parse/compile + less transfer + less to decompress</p>
</blockquote>
<p><a href="https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e"><a href="https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e">https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e</a>
</a></p>]]>
            </summary>
            <updated>2017-11-22T21:39:47+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Anonymous classes in PHP 7 are perfect for small inline view models]]></title>
            <link rel="alternate" href="https://murze.be/anonymous-classes-in-php-7-are-perfect-for-small-inline-view-models" />
            <id>https://murze.be/910</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<blockquote class="twitter-tweet" data-conversation="none" data-lang="nl"><p lang="en" dir="ltr">🔥 Annonymous classes in PHP 7 are perfect for small inline view models. Makes the view so much cleaner! <a href="https://t.co/z9b4UKytk9">pic.twitter.com/z9b4UKytk9</a></p>— Joseph Silber (@joseph_silber) <a href="https://twitter.com/joseph_silber/status/932619824232091654?ref_src=twsrc%5Etfw">20 november 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]>
            </summary>
            <updated>2017-11-20T19:51:49+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[★ Reducing the size of a css file]]></title>
            <link rel="alternate" href="https://murze.be/reducing-the-size-of-a-css-file" />
            <id>https://murze.be/909</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://github.com/FullHuman/purgecss">PurgeCSS</a> is a tool that can reduce the filesize of a CSS file. It does this by removing any css classes that are not used. It can detect which CSS classes are used by scanning the source files of your application. </p>
<p>In this tweet <a href="https://twitter.com/reinink">Jonathan Reinink</a> shared how it can be configured in Laravel Mix: </p>
<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">🍤 I just gave Purgecss a try on project using <a href="https://twitter.com/tailwindcss?ref_src=twsrc%5Etfw">@tailwindcss</a>, and I'm super impressed. It massively reduce the final CSS file size with basically no work on my part.<br><br>Here's my Webpack config: <a href="https://t.co/MOhrzToqot">https://t.co/MOhrzToqot</a><br><br>Big thanks to <a href="https://twitter.com/AndrewDelPrete?ref_src=twsrc%5Etfw">@AndrewDelPrete</a> for figuring this out. 😍</p>— Jonathan Reinink (@reinink) <a href="https://twitter.com/reinink/status/932599675764518913?ref_src=twsrc%5Etfw">20 november 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Jonathan mentions massive reductions in the filesize of a css. Let's take a look at how much is massive. This is the output of <code>yarn run production</code> for <a href="https://murze.be">murze.be</a> before installing PurgeCSS.</p>
<p><img src="/uploads/media/purgecss/before.png" alt="stats before purgecss" /></p>
<p>155 kB for <code>front.css</code> and 162 kB for <code>back.css</code>. Not bad. <a href="https://github.com/spatie/murze.be/blob/81a9a96/webpack.mix.js#L34-L56">Let's add PurgeCSS</a>.</p>
<p><img src="/uploads/media/purgecss/after.png" alt="stats before purgecss" /></p>
<p>The resulting files are 90% smaller. Pretty impressive!</p>
<p>If you want to know more about PurgeCSS be sure to check out <a href="https://medium.com/@AndrewDelPrete/using-purifycss-to-remove-unused-tailwind-css-classes-173b3ee8ee01">this blogpost</a> by <a href="https://twitter.com/AndrewDelPrete">Andrew Del Prete</a>.</p>]]>
            </summary>
            <updated>2017-11-20T22:30:49+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[★ On migrating my blog from WordPress to a Laravel application]]></title>
            <link rel="alternate" href="https://murze.be/on-migrating-my-blog-from-wordpress-to-a-laravel-application" />
            <id>https://murze.be/906</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>Regular visitors will have noticed that last week this blog got a new coat of paint. This new layout isn't just a new WordPress theme. Things have changed on the backend as well. Previously my blog was powered by WordPress. I've migrated it to a custom built Laravel app. That app is open sourced. You can find the actual code that's being deployed on the server in <a href="https://github.com/spatie/murze.be">this repo on GitHub</a>.</p>
<p>In this blogpost I'd like to explain why and how I did this migration.</p>
<h2 id="loving-and-ditching-wordpress">Loving and ditching WordPress <a class='text-grey' href='#loving-and-ditching-wordpress'>#</a></h2>
<p>When I started blogging, <a href="https://murze.be/a-board-game-that-teaches-four-year-olds-how-to-code">nearly three years ago</a>, I just wanted to have an easy way to share interesting links to other people's blogs. WordPress was perfect for that. It's easily installed. It comes with great features out of the box, such as an excellent admin interface, RSS feeds, a good search, ... There are also great plugins to add things like Analytics tracking, page caching, seo optimization, ... Because at my company I didn't do any styling I never bothered to pick up learning css, so it was also quite handy that WordPress has thousands of themes available.</p>
<p>For the first year in WordPress land, life was good. Here's how the blog looked back then:</p>
<p><img src="https://murze.be/uploads/media/migrating-wordpress/murze1.jpg" alt="Screenshot of murze.be" /></p>
<p>Meanwhile I started to work in the open source space and together with <a href="https://spatie.be">my team</a> <a href="https://packagist.org/packages/spatie/">created some packages</a>. Instead of only sharing links on my blog to other people's content I started to write introductory posts to those packages. Because the blog started to attract more visitors I decided to put a little effort to make the blog look better. I did this by just installing an new theme (which was tweaked a little by my colleague <a href="https://twitter.com/willemvbockstal">Willem</a>).  </p>
<p>I wanted to customize the placing of all the content a bit more, but as a non-WordPress developer messing with the WordPress codebase can be quite daunting. I'm used to work with modern PHP code. I did some dirty hacks in some of the php files. That didn't feel quite good, but it worked. As a user I love WordPress, but as a developer I kinda hate it.</p>
<p>For a time I was happy again with the looks of the blog. Here's a screenshot how it looked like from around October 2016 up until to a few days ago.</p>
<p><img src="https://murze.be/uploads/media/migrating-wordpress/murze2.png" alt="Screenshot of murze.be" /></p>
<p>In the summer of this year ago Adam Wathan <a href="https://adamwathan.me/css-utility-classes-and-separation-of-concerns/">announced</a> that, together with some friends, he was working on a new open source css framework called <a href="https://tailwindcss.com">Tailwind</a>. Like mentioned above, I never took the time to learn css and I considered it my Achilles heel. Tailwind could be an interesting entry point in the world of css for me. I'm always more motivated to learn something if I can use new knowledge on a concrete project. That's why <a href="https://twitter.com/freekmurze/status/926779416658587648">I decided</a> to rebuild my blog with Tailwind, Laravel and a couple of our own packages.</p>
<p>Without any prior css knowledge I worked through <a href="https://tailwindcss.com/docs/what-is-tailwind/">the excellent Tailwind docs</a>. I read <a href="https://murze.be/redesigning-laravelio">this blogpost</a> by Adam and Tailwind co-creator Steve Schoger. <a href="https://www.youtube.com/watch?v=ZrRRMBaz5Z0">This video</a> on rebuilding <a href="https://laravel.io/">Laravel.io</a> was very helpful too. I experimenting with Tailwind a bit. I didn't have a specific design in mind when starting with the project. The final design that you see now is an accidental result of my learning.  </p>
<p><img src="https://murze.be/uploads/media/migrating-wordpress/murze3.png" alt="Screenshot of murze.be" /></p>
<h2 id="behind-the-scenes">Behind the scenes <a class='text-grey' href='#behind-the-scenes'>#</a></h2>
<p>Like mentioned above my blog is now a Laravel application. You can view the entire source code in <a href="https://github.com/spatie/murze.be">this repo on GitHub</a>. Let's highlight a few interesting bits.</p>
<h3 id="searching-blogposts">Searching blogposts <a class='text-grey-light' href='#searching-blogposts'>#</a></h3>
<p>Searching blogposts is powered by <a href="https://www.algolia.com/">Algolia</a>, a blazing fast search service. All blogposts are transfered from the database to Algolia using <a href="https://laravel.com/docs/5.5/scout">Laravel Scout</a>. With Scout installed you get <a href="https://laravel.com/docs/5.5/scout#indexing">an Artisan command</a> to perform the initial transfer of a database table to Algolia. Scout also provides a <code>Searchable</code> trait that, <a href="https://github.com/spatie/murze.be/blob/09a1d275d1f29d13b81858dc10e9230086a9dab1/app/Models/Post.php#L24">applied to model</a>, will ensure that new records and updates to existing ones will be sent to the Algolia index as well.</p>
<p><img src="https://murze.be/uploads/media/migrating-wordpress/murze4.png" alt="Screenshot of murze.be" /></p>
<p>Now that you know how posts are transfered to index, let's take a look at how those posts are retrieved. If you try searching blogposts you'll hopefully notice that the results appear nearly instantly. The search requests do not hit my own server. This whole search operation happens client side. <a href="https://github.com/spatie/murze.be/blob/2734ddc/resources/assets/js/front/components/SearchPosts.vue">This Vue component</a> is responsible for rendering the search field and results. It uses the <a href="https://www.algolia.com/doc/api-client/javascript/getting-started/">Algolia's JavaScript API</a> to perform search requests.</p>
<p>I should mention that Algolia is not a free service but, unless you really expect a lot of search requests, their free tier is sufficient to use on a personal blog.</p>
<h3 id="importing-wordpress-posts">Importing WordPress posts <a class='text-grey-light' href='#importing-wordpress-posts'>#</a></h3>
<p>Of course I didn't want to lose all old content, so had to come up of a way to transfer WordPress posts to my the new Laravel app. Fortunately this is not so difficult. Here is <a href="https://github.com/spatie/murze.be/blob/2734ddcf7c442c36618be0f6c1d52cb19228a6c2/app/Console/Commands/ImportWp.php">the artisan command</a> that imports posts and tags from a WordPress database. To handle tags I used <a href="https://docs.spatie.be/laravel-tags/v2/introduction">our home grown laravel-tags package</a>. That package makes it easy to <a href="https://github.com/spatie/murze.be/blob/2734ddcf7c442c36618be0f6c1d52cb19228a6c2/app/Console/Commands/ImportWp.php#L90">associate tags with an Eloquent model</a>.</p>
<h3 id="handling-changed-urls">Handling changed urls <a class='text-grey-light' href='#handling-changed-urls'>#</a></h3>
<p>When using WordPress the publication year and month of a post is used in the url eg: <code>https://murze.be/2017/06/building-realtime-dashboard-powered-laravel-vue-2017-edition/</code>. For my new blog I wanted to lose that time component and use shorter links as <code>https://murze.be/building-realtime-dashboard-powered-laravel-vue-2017-edition</code>. The old WP urls are in the Google index. If left unhandled all visitors coming to my blog via a Google search would see a 404 page. </p>
<p><a href="https://github.com/spatie/laravel-missing-page-redirector">Our laravel-missing-page-redirector package</a> was built to solve this problem. The import command also  <a href="https://github.com/spatie/laravel-missing-page-redirector">populates a <code>redirect</code> table</a>. The redirector package has support for creating your own redirector to specifiy a source for the redirects (such as a database table). Here is <a href="https://github.com/spatie/murze.be/blob/2734ddcf7c442c36618be0f6c1d52cb19228a6c2/app/Services/MissingPageRedirector/DatabaseRedirector.php">the redirector</a> that reads the <code>redirects</code> table.</p>
<p>With all this in place all the old urls of my blog are redirected to the new pages. Try it out by visiting <code>https://murze.be/2017/06/building-realtime-dashboard-powered-laravel-vue-2017-edition</code></p>
<h3 id="providing-an-rss-feed">Providing an RSS feed <a class='text-grey-light' href='#providing-an-rss-feed'>#</a></h3>
<p>I try to keep up to date with what's happening in my sector by reading a lot of blogs. Visiting each blog separately would take a lot of time, that's why I prefer <a href="https://murze.be/stay-up-to-speed-with-php-by-reading-these-feeds">subscribing to RSS feeds</a> and read all content in <a href="http://reederapp.com/mac/">my prefered RSS reader</a>.</p>
<p>Of course the redesigned murze.be should have an RSS feed. WordPress comes with support for RSS feeds out of the box. In Laravel land you can use another homegrown package: <a href="https://github.com/spatie/laravel-feed">laravel-feed</a>. That package makes it very easy add a feed or multiple feeds to your blog. Here is <a href="https://github.com/spatie/murze.be/blob/2734ddcf7c442c36618be0f6c1d52cb19228a6c2/app/Models/Post.php#L121-L130">the function that transforms a post to a feed item</a>.</p>
<p>The feeds themselves are found on <a href="https://murze.be/feed"><a href="https://murze.be/feed">https://murze.be/feed</a></a> (contains all posts) and <a href="https://murze.be/feed/php"><a href="https://murze.be/feed/php">https://murze.be/feed/php</a></a> (contains only posts that are tagged <code>php</code>).</p>
<h3 id="crossposting-content">Crossposting content <a class='text-grey-light' href='#crossposting-content'>#</a></h3>
<p>Whenever I published a new post on my WordPress blog a tweet was sent and the content was cross posted to Medium. This was all handled by two plugins. Of course I wanted to do keep that behaviour. Fortunately both the Twitter and Medium API's are pretty easy to use, so I coded up a solution myself without relying on any packages. </p>
<p>Here is <a href="https://github.com/spatie/murze.be/blob/87b672e/app/Models/Post.php#L78-L97">the code in the <code>Post</code> model</a> that dispatches the <a href="https://github.com/spatie/murze.be/blob/87b672e6d18390e440e722a82c73cc516334e026/app/Jobs/SendTweet.php"><code>SendTweet</code></a> and the <a href="https://github.com/spatie/murze.be/blob/87b672e6d18390e440e722a82c73cc516334e026/app/Jobs/PostOnMedium.php"><code>PostOnMedium</code></a> jobs. </p>
<p>On my old WP blog publishing a post always took a couple of seconds because communicating with Twitter and Medium takes a while. On my new Laravel blog publishing something is very fast because those <code>SendTweet</code> and <code>PostOnMedium</code> posts are queued. In fact all aforementioned syncing with Algolia is queued as well. <a href="https://laravel.com/docs/5.5/horizon">Horizon</a> is used to handle and monitor all queued jobs.</p>
<p><img src="https://murze.be/uploads/media/migrating-wordpress/horizon.png" alt="Screenshot of Horizon" /></p>
<h2 id="miscellaneous">Miscellaneous <a class='text-grey' href='#miscellaneous'>#</a></h2>
<h3 id="writing-markdown">Writing Markdown <a class='text-grey-light' href='#writing-markdown'>#</a></h3>
<p>To write posts I've build a basic admin interface. I like to write Markdown instead of plain html. I've tried a couple of JS powered markdown editors and landed on using <a href="https://simplemde.com/">SimpleMDE</a>.</p>
<p><img src="https://murze.be/uploads/media/migrating-wordpress/markdown.png" alt="Screenshot of backsite of murze.be" /></p>
<p>On the front site that Markdown content must be rendered as html. I've added this method to the <code>Post</code> model.</p>
<pre><code class="language-php">public function getTextAttribute($original)
{
    return (new Parsedown())-&gt;text($original);
}</code></pre>
<p>This will make sure that whenever <code>$post-&gt;text</code> is used in a view the content of a post is converted from Markdown to html.</p>
<h3 id="improving-performance">Improving performance <a class='text-grey-light' href='#improving-performance'>#</a></h3>
<p>The Laravel app is already pretty fast out of the box, but we can do better. In the past there were a few of my posts that ended up fairly high on Hacker News. When that happens there are a lot of concurrent readers and the blog should be able to handle it. In WordPress I've used the <a href="https://wordpress.org/plugins/wp-super-cache/">WP Super Cache</a> plugin. This will save a rendered page as a file on disk. The next time the same page is requested again it will just serve the saved content from that file instead of building the page up again from scratch.</p>
<p>In Laravel the exact same thing can be achieved by using yet another one of our packages: <a href="https://github.com/spatie/laravel-responsecache">laravel-responsecache</a>.  If you want to know more about that package read <a href="https://murze.be/speed-up-a-laravel-app-by-caching-the-entire-response">the introductory blogpost about it</a>.</p>
<p>You can see the package working if you inspect the response headers of this blog. Notice the <code>laravel-responsecache</code> header.</p>
<p><img src="https://murze.be/uploads/media/migrating-wordpress/responsecache.png" alt="Screenshot of headers of murze.be" /></p>
<h3 id="sending-newsletters">Sending newsletters <a class='text-grey-light' href='#sending-newsletters'>#</a></h3>
<p>Every two weeks I send out a digest of all new content on my blog to subscribers of my newsletter. You can subscribe <a href="https://murze.be/newsletter">here</a>. A few months ago, to decrease expenses, I switched ditched MailChimp in favour of <a href="https://sendy.co/">Sendy</a>. You'll find more info on swichting to Sendy in <a href="https://ma.ttias.be/mailchimp-sendy-saved-600-year/">this blogpost by Mattias Geniar</a>.</p>
<p>Previously I had to manually collect all the titles, links and excerpts to include in the newsletter. For every edition of my newsletter that took about 30 to 45 minutes. On my new blog I've added <a href="https://github.com/spatie/murze.be/blob/71245be/app/Services/Newsletter/Generator.php">some code to automatically fetch all the content and build up the html of the newsletter</a>.</p>
<h3 id="deploying-a-new-version">Deploying a new version <a class='text-grey-light' href='#deploying-a-new-version'>#</a></h3>
<p>I'm a big fan of <a href="https://laravel.com/docs/5.5/envoy">Envoy</a>, a tool to easily run commands on remote servers. My blog repo contains <a href="https://github.com/spatie/murze.be/blob/8c48ff2/Envoy.blade.php">an envoy script</a> that can perform a Capistrano like deployment with near zero downtime.</p>
<h2 id="in-closing">In closing <a class='text-grey' href='#in-closing'>#</a></h2>
<p>I hope that you've enjoyed this little tour of the codebase of my blog. Feel free to fork the code and use it for your own blog. Keep in mind that the code in the repo isn't a full fledged CMS but just a simple app that's tailored to my needs.</p>
<p>I had a lot of fun learning Tailwind. Without any prior knowledge of css I managed to quickly build a design where I'm happy with. There was also some frustration involved when things didn't work as expected. But I blame my own lack of css skills for that. Luckily <a href="https://spatie.be/en/team">my team</a> and some awesome people in the community <a href="https://github.com/spatie/murze.be/pulls?utf8=%E2%9C%93&amp;q=is%3Apr">helped me out a bit</a>, when I was stuck.</p>
<p>If you're into Laravel be sure to check out the repo containing the source code: <a href="https://github.com/spatie/murze.be"><a href="https://github.com/spatie/murze.be">https://github.com/spatie/murze.be</a></a></p>]]>
            </summary>
            <updated>2017-11-21T17:38:09+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Shorthand comparisons in PHP]]></title>
            <link rel="alternate" href="https://murze.be/shorthand-comparisons-in-php" />
            <id>https://murze.be/908</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>My colleague <a href="https://twitter.com/brendt_gd">Brent</a> published a new blogpost on how the ternary and null coalescing operators work in PHP.</p>
<blockquote>
<p>You've probably used the ternary ?: and the null coalescing ?? operators in PHP. But do you really know how they work? Understanding these operators makes you use them more, resulting in a cleaner codebase.</p>
</blockquote>
<p><a href="https://www.stitcher.io/blog/shorthand-comparisons-in-php"><a href="https://www.stitcher.io/blog/shorthand-comparisons-in-php">https://www.stitcher.io/blog/shorthand-comparisons-in-php</a></a></p>]]>
            </summary>
            <updated>2017-11-20T08:41:01+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Removing comments is one of the best drivers towards clean code]]></title>
            <link rel="alternate" href="https://murze.be/removing-comments-is-one-of-the-best-drivers-towards-clean-code" />
            <id>https://murze.be/904</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">🔥 Pushing yourself to remove comments is one of the best drivers towards clean code. Here&#39;s a few tips on how to spot and replace comments that may be unnecessary… <a href="https://t.co/STIK6AIKXt">pic.twitter.com/STIK6AIKXt</a></p>&mdash; Jason McCreary (@gonedark) <a href="https://twitter.com/gonedark/status/931195727195332608?ref_src=twsrc%5Etfw">16 november 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]>
            </summary>
            <updated>2017-11-17T17:26:57+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Redesigning Laravel.io]]></title>
            <link rel="alternate" href="https://murze.be/redesigning-laravelio" />
            <id>https://murze.be/905</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>In this blogpost by <a href="https://tailwindcss.com/">Tailwind CSS</a> co-creators <a href="https://twitter.com/adamwathan">Adam Wathan</a> and <a href="https://twitter.com/steveschoger">Steve Schoger</a> share lots of actionable tips to improve the layout of your site.</p>
<blockquote>
<p>Laravel.io is a forum and community portal for developers who use the Laravel PHP framework.</p>
<p>They recently launched a brand new version of the site, but being a volunteer-driven open source project, finding the resources to put together a really polished design can be tough.</p>
<p>We asked and got the go ahead to try our hands at a bit of a facelift, so let’s see what we can do to take the UI up a notch!</p>
</blockquote>
<p><a href="https://medium.com/refactoring-ui/redesigning-laravel-io-c47ac495dff0"><a href="https://medium.com/refactoring-ui/redesigning-laravel-io-c47ac495dff0">https://medium.com/refactoring-ui/redesigning-laravel-io-c47ac495dff0</a></a></p>]]>
            </summary>
            <updated>2017-11-17T17:40:46+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Eloquent&#039;s query builder has a whereBetween function]]></title>
            <link rel="alternate" href="https://murze.be/eloquents-query-builder-has-a-wherebetween-function" />
            <id>https://murze.be/903</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">? TIL Eloquent&#39;s query builder has a whereBetween function<a href="https://twitter.com/hashtag/laravel?src=hash&amp;ref_src=twsrc%5Etfw">#laravel</a> <a href="https://twitter.com/hashtag/php?src=hash&amp;ref_src=twsrc%5Etfw">#php</a> <a href="https://t.co/SyCXshL3Oe">pic.twitter.com/SyCXshL3Oe</a></p>&mdash; Freek Van der Herten (@freekmurze) <a href="https://twitter.com/freekmurze/status/927152024365486080?ref_src=twsrc%5Etfw">November 5, 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]>
            </summary>
            <updated>2017-11-17T15:21:57+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Symmetry in naming is a powerful tool]]></title>
            <link rel="alternate" href="https://murze.be/symmetry-in-naming-is-a-powerful-tool" />
            <id>https://murze.be/902</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">? Symmetry in naming is a powerful tool I never gave the weight it deserves. Embrace the visual relation! A common example in Vue: <a href="https://t.co/QEBbHDUvWY">pic.twitter.com/QEBbHDUvWY</a></p>&mdash; Caleb Porzio (@calebporzio) <a href="https://twitter.com/calebporzio/status/928655477050871809?ref_src=twsrc%5Etfw">November 9, 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]>
            </summary>
            <updated>2017-11-17T15:21:57+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Improve the error output of console commands in a Laravel app]]></title>
            <link rel="alternate" href="https://murze.be/improve-the-error-output-of-console-commands-in-a-laravel-app" />
            <id>https://murze.be/901</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>If you execute an Artisan command and something goes wrong, the error output is not terribly detailed.</p>
<img src="/uploads/2017/11/Screen-Shot-2017-11-13-at-20.10.21-700x579.png" alt="" width="700" height="579" class="alignnone size-large wp-image-5371" />
<p>You can improve the output slightly by tagging on <code>-vvv</code> to make to output more verbose.</p>
<img src="/uploads/2017/11/Screen-Shot-2017-11-13-at-20.18.32-700x648.png" alt="" width="700" height="648" class="alignnone size-large wp-image-5372" />
<p>Now we already know the line that where the problem originates: there's something going wrong on line 41 of the <code>MyBrokenCommand</code> command.</p>
<p>But we can improve the error output still. <a href="https://twitter.com/enunomaduro">Nuno Maduro</a> coded up <a href="https://github.com/nunomaduro/collision">a fantastic package called Collision</a> that, once installed, provides much nicer output.</p>
<img src="/uploads/2017/11/Screen-Shot-2017-11-13-at-20.11.36-700x648.png" alt="" width="700" height="648" class="alignnone size-large wp-image-5373" />
<p>In this output we can immediately see what the silly programmer did wrong.</p>
<p>Let's hope that a future version of Laravel will be able to spit out these nicely formatted errors out of the box.</p>]]>
            </summary>
            <updated>2017-11-17T15:21:57+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[PHP Versions Stats - 2017.2 Edition]]></title>
            <link rel="alternate" href="https://murze.be/php-versions-stats-20172-edition" />
            <id>https://murze.be/900</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>Every six months <a href="https://twitter.com/seldaek">Jordi Boggiano</a>, co-creator and maintainer of Composer/Packagist, publishes statistics on which versions of PHP are used. Some good news: PHP 7.1 is the most used version.</p>
<blockquote>A quick note on methodology, because all these stats are imperfect as they just sample some subset of the PHP user base. I look in the packagist.org logs of the last month for Composer installs done by someone. Composer sends the PHP version it is running with in its User-Agent header, so I can use that to see which PHP versions people are using Composer with.</blockquote>
<p><a href="https://seld.be/notes/php-versions-stats-2017-2-edition"><a href="https://seld.be/notes/php-versions-stats-2017-2-edition">https://seld.be/notes/php-versions-stats-2017-2-edition</a></a></p>]]>
            </summary>
            <updated>2017-11-17T15:21:57+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[In PHP 7.3 a trailing comma will be allowed in function calls]]></title>
            <link rel="alternate" href="https://murze.be/in-php-73-a-trailing-comma-will-be-allowed-in-function-calls" />
            <id>https://murze.be/899</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">? New in PHP 7.3: A trailing comma is now allowed in function &amp; method calls ?? <a href="https://t.co/SeNqfbrbRW">https://t.co/SeNqfbrbRW</a> <a href="https://t.co/auBOVE9FpZ">pic.twitter.com/auBOVE9FpZ</a></p>&mdash; SammyK, (@SammyK) <a href="https://twitter.com/SammyK/status/926901961399652352?ref_src=twsrc%5Etfw">4 november 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]>
            </summary>
            <updated>2017-11-17T15:21:57+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Airplanes and Ashtrays]]></title>
            <link rel="alternate" href="https://murze.be/airplanes-and-ashtrays" />
            <id>https://murze.be/898</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://csswizardry.com/about/">Harry Roberts</a> makes the case for making technical debt visible instead of trying to hide it.</p>
<blockquote>This means that, although far from ideal, the impact of these hacks is well contained and signposted, meaning that they won’t slip through the cracks and remain hidden in the codebase for the next five years.

This pragmatism and lack of stubbornness can make your codebase much more malleable, resilient, and ultimately much more useful. Everything is a compromise.</blockquote>
<p><a href="https://csswizardry.com/2017/10/airplanes-and-ashtrays/"><a href="https://csswizardry.com/2017/10/airplanes-and-ashtrays/">https://csswizardry.com/2017/10/airplanes-and-ashtrays/</a></a></p>]]>
            </summary>
            <updated>2017-11-17T15:21:57+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[A ping command with a graph]]></title>
            <link rel="alternate" href="https://murze.be/a-ping-command-with-a-graph" />
            <id>https://murze.be/897</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">Gping - like regular ping, but with a graph!  <a href="https://t.co/bPKWkEA8Zk">https://t.co/bPKWkEA8Zk</a> <a href="https://twitter.com/hashtag/linux?src=hash&amp;ref_src=twsrc%5Etfw">#linux</a> <a href="https://twitter.com/hashtag/ubuntu?src=hash&amp;ref_src=twsrc%5Etfw">#ubuntu</a></p>&mdash; Colin O&#39;Dell (@colinodell) <a href="https://twitter.com/colinodell/status/925147013372628997?ref_src=twsrc%5Etfw">30 oktober 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]>
            </summary>
            <updated>2017-11-17T15:21:57+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Writing clean code]]></title>
            <link rel="alternate" href="https://murze.be/writing-clean-code" />
            <id>https://murze.be/896</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://twitter.com/gonedark">Jason McCreary</a>, creator of<a href="https://laravelshift.com/"> Laravel Shift</a>, wrote a down a two part series on how to write cleaner code.</p>
<blockquote>To measure our change, we should ask: Did we improve readability?

Admittedly a bit subjective, but you push yourself to stay objective. I've been pair programming for the last two years. Developers tend to agree on fundamental readability. Where we differ at the edges. These nuances can lead to some pretty great discussion.

...

The answer to did we improve code readability may vary from developer to developer and project to project. But always ask the question…</blockquote>
<p><a href="https://dev.to/gonedark/writing-clean-code"><a href="https://dev.to/gonedark/writing-clean-code">https://dev.to/gonedark/writing-clean-code</a></a>
<a href="https://dev.to/gonedark/writing-clean-code-part-2-9fn"><a href="https://dev.to/gonedark/writing-clean-code-part-2-9fn">https://dev.to/gonedark/writing-clean-code-part-2-9fn</a></a></p>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[A little story about the `yes` Unix command]]></title>
            <link rel="alternate" href="https://murze.be/a-little-story-about-the-yes-unix-command" />
            <id>https://murze.be/895</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><code>yes</code> is a Unix command that will spit out and infinite stream of <code>y</code>'s. In a post on his blog <a href="https://twitter.com/matthiasendler">Matthias Endler</a>, an engineer at <a href="http://tech.trivago.com/">trivago</a>, shares that there's more than meets the eye to make this happen in a performant way.</p>
<blockquote>The trivial program yes turns out not to be so trivial after all. It uses output buffering and memory alignment to improve performance. Re-implementing Unix tools is fun and makes me appreciate the nifty tricks, which make our computers fast.</blockquote>
<p><a href="https://matthias-endler.de/2017/yes/"><a href="https://matthias-endler.de/2017/yes/">https://matthias-endler.de/2017/yes/</a></a></p>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Don&#039;t design your emails]]></title>
            <link rel="alternate" href="https://murze.be/dont-design-your-emails" />
            <id>https://murze.be/894</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>You can spend a lot of time to make emails look pretty, but it might be better to just don't style them at all. <a href="https://twitter.com/grigoriy_kogan">Greg Kogan</a> did some A/B testing an concluded that sending plain emails results in more opens, clicks, replies, ...</p>
<blockquote>
Why are the plain emails crushing the performance of designed emails?

- They're less likely to be caught in spam filters. Having less HTML and fewer non-text elements such as images lowers the likelihood of triggering spam filters. You can use a free spam checker to validate this by testing plain and designed emails.
- They're less likely to go into the "Promotions" tab in Gmail (used by ~16% of all email users), for the same reasons above. From my testing, the plain emails typically end up in the Updates tab and some times even in the primary tab. Of course, the text in the email also affects this.
- They don't look like advertisements. The second the recipient interprets your email as an ad, promotion, or sales pitch—and it does take just a second—its chances of being read or acted upon plummet towards zero. A plain email leads people to start reading it before jumping to conclusions.
- They feel more personal. It's no handwritten note, but it's much more personal than an over-designed email with the recipient's first name crammed somewhere inside.</blockquote>
<p><a href="https://www.gkogan.co/blog/dont-design-emails/"><a href="https://www.gkogan.co/blog/dont-design-emails/">https://www.gkogan.co/blog/dont-design-emails/</a></a></p>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[★ A beautiful webapp to fetch dns records]]></title>
            <link rel="alternate" href="https://murze.be/a-beautiful-webapp-to-fetch-dns-records" />
            <id>https://murze.be/893</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>Recently <a href="https://spatie.be">my company Spatie</a> launched <a href="https://dnsrecords.io"><a href="https://dnsrecords.io">https://dnsrecords.io</a></a>, a beautiful site to quickly lookup dns records.</p>
<img src="/uploads/2017/11/Screen-Shot-2017-11-04-at-10.31.58.png" alt="" width="700" height="458" class="alignnone size-large wp-image-5328" />
<p>True to form, we also opensourced it, here is the sourcecode <a href="https://github.com/spatie/dnsrecords.io">on GitHub</a>. If you want to do some dns lookups in your own app, you'll be happy to know that we extracted the dns lookup functionalities to <a href="https://github.com/spatie/dns">a package</a>.</p>
<p>In this blog post I'd like to share why and how we've built all this.</p>
<h3>Why create another dns lookup service?</h3>
<p>A few weeks ago <a href="https://twitter.com/vdv_jef">Jef</a>, our project manager at <a href="https://spatie.be">Spatie</a>, was asked by a client to give some dns related info. Because Jef is not a technical person. He has a fear/hate relation with the terminal. So he always delegates technical questions like those to his teammates. They just use <a href="http://www.thegeekstuff.com/2012/02/dig-command-examples/"><code>dig</code></a> to quickly get dns records. Wouldn't it be great if Jef could do the dns lookups on his own? An idea was born.</p>
<p>But aren't there already many services to perform dns lookups? Let's [Google around]
(<a href="https://www.google.be/search?q=dns+records+lookup&amp;oq=dns+records+lookup">https://www.google.be/search?q=dns+records+lookup&amp;oq=dns+records+lookup</a>). Here are a few of the first hits:</p>
<img src="/uploads/2017/11/Screen-Shot-2017-11-04-at-10.41.16.png" alt="" width="700" height="458" class="alignnone size-large wp-image-5330" />
<img src="/uploads/2017/11/Screen-Shot-2017-11-04-at-10.39.42.png" alt="" width="700" height="458" class="alignnone size-large wp-image-5331" />
<img src="/uploads/2017/11/Screen-Shot-2017-11-04-at-10.44.36.png" alt="" width="700" height="459" class="alignnone size-large wp-image-5332" />
<p>Most of the services work, but they are really really ugly. We couldn't find any dns lookup service that looks beautiful. So we went ahead with creating a webapp of our own.</p>
<h3>Introducing dnsrecords.io</h3>
<p>My colleague <a href="https://twitter.com/willemvbockstal">Willem</a> did an excellent job in making <a href="https://dnsrecords.io">dnsrecords.io</a> look beautiful. This is what you see when visiting the site.</p>
<img src="/uploads/2017/11/Screen-Shot-2017-11-04-at-10.50.31.png" alt="" width="700" height="458" class="alignnone size-large wp-image-5334" />
<p>No distractions like on the other sites. Just enter a domain to get some records. It couldn't be simpler.</p>
<img src="/uploads/2017/11/Screen-Shot-2017-11-04-at-10.52.17.png" alt="" width="700" height="458" class="alignnone size-large wp-image-5335" />
<p>The results are displayed on a link which has a sharable link. You can just visit <a href="https://dnsrecords.io/facebook.com"><a href="https://dnsrecords.io/facebook.com">https://dnsrecords.io/facebook.com</a></a> to get the dns records of Facebook.</p>
<p>If you type <code>help</code> you see some extra commands you can execute on our app:</p>
<img src="/uploads/2017/11/Screen-Shot-2017-11-04-at-10.57.51.png" alt="" width="700" height="458" class="alignnone size-large wp-image-5337" />
<p>Our real killer feature is of course that you can play <a href="https://js-dos.com/games/doom.exe.html">Doom</a>. Go on and waste some hours with this excellent game. When you're done with that go on and drag that bookmarklet to your toolbar to lookup the dns records of the sites you visit.</p>
<h3>Behind the scenes</h3>
<p>We've open sourced the entire site. You can view the code that's actually being deployed to our server in this repo <a href="https://github.com/spatie/dnsrecords.io">on GitHub</a>.</p>
<p>Let's walk a bit through the code. When looking at an early version of the only controller in this project, you'll see that <a href="https://github.com/spatie/dnsrecords.io/blob/40de729e67ed38033f9636f6cf5f7843cd898166/app/Http/Controllers/HomeController.php">everything happened</a> inside that single controller. But because we want to easily add more commands in the features we refactored it quite a bit. In the <a href="https://raw.githubusercontent.com/spatie/dnsrecords.io/master/app/Http/Controllers/HomeController.php">current version the controller</a> is quite skinny:</p>
<pre><code>&lt;?php

namespace App\Http\Controllers;

use App\Services\Commands\CommandChain;
use Illuminate\Http\Request;

class HomeController extends Controller
{
    public function index()
    {
        return view('home.index');
    }

    public function submit($command = null, Request $request)
    {
        $command = $request['command'] ?? $command;

        if (!$command) {
            return $this-&gt;index();
        }

        return (new CommandChain())-&gt;perform(strtolower($command));
    }
}
</code></pre>
<p>Every submitted <code>$command</code> is delegated to a <code>CommandChain</code>. Let's take a look at the code of that <code>CommandChain</code>.</p>
<pre><code>&lt;br /&gt;class CommandChain
{
    protected $commands = [
        Manual::class,
        Localhost::class,
        Clear::class,
        Ip::class,
        Doom::class,
        DnsLookup::class,
    ];

    public function perform(string $command): Response
    {
        return collect($this-&gt;commands)
                -&gt;map(function (string $commandClassName) {
                    return new $commandClassName;
                })
                -&gt;first-&gt;canPerform($command)
                -&gt;perform($command);
    }
}
</code></pre>
<p>You'll see above that we register some command classes to the chain. In <code>perform</code> we'll instanciate them. The chain will ask each class: &quot;can you perform this <code>$command</code>? &quot;. The first one that can will actually perform that <code>$command</code>.</p>
<p>Let's take a look at a such a command class. Here's the code of <a href="https://github.com/spatie/dnsrecords.io/blob/master/app/Services/Commands/Commands/Doom.php">the <code>Doom</code> command</a>:</p>
<pre><code>namespace App\Services\Commands\Commands;

use App\Services\Commands\Command;
use Symfony\Component\HttpFoundation\Response;

class Doom implements Command
{
    public function canPerform(string $command): bool
    {
        return $command === 'doom';
    }

    public function perform(string $command): Response
    {
        return redirect('https://js-dos.com/games/doom.exe.html');
    }
}
</code></pre>
<p>The <code>perform</code> function of a <code>Command</code> class always returns are <code>Illuminate\Http\Response</code>. In case of the <code>Doom</code> command we'll just return a redirect to a site where you can play Doom.</p>
<p>Let's take a look at another command,  <a href="https://github.com/spatie/dnsrecords.io/blob/master/app/Services/Commands/Commands/DnsLookup.php">the <code>DnsLookup</code> command</a>:</p>
<pre><code>namespace App\Services\Commands\Commands;

use App\Services\Commands\Command;
use App\Services\DnsRecordsRetriever;
use Spatie\Dns\Dns;
use Symfony\Component\HttpFoundation\Response;

class DnsLookup implements Command
{
    public function canPerform(string $command): bool
    {
        return true;
    }

    public function perform(string $command): Response
    {
        $dns = new Dns($command);

        $dnsRecords = $dns-&gt;getRecords();

        $domain = $dns-&gt;getDomain($command);

        if ($dnsRecords === '') {
            $errorText = __('errors.noDnsRecordsFound', compact('domain'));

            flash()-&gt;error($errorText);

            return redirect('/');
        }

        return response()-&gt;view('home.index', ['output' =&gt; $dnsRecords, 'domain' =&gt; $domain ]);
    }
}
</code></pre>
<p>Noticed that <code>canPerform</code> returns <code>true</code>. This command basically says, I can handle everything. If you look again <code>$commands</code> array in the <code>CommandChain</code> you'll see that <code>DnsLookup</code> is registered last. So when no other Command can handle the <code>$command</code> the <code>DnsLookup</code> will do its thing.</p>
<p>The real magic of looking up dns records happens inside that <code>Spatie\Dns\Dns</code> object which is part of <a href="https://github.com/spatie/dns">our spatie/dns package</a>.</p>
<p>Here's how you can use it:</p>
<pre><code>$dns = new Spatie\Dns('spatie.be');

$dns-&gt;getRecords(); // returns all records

$dns-&gt;getRecords('A'); // returns only A records
$dns-&gt;getRecords('MX'); // returns only MX records

$dns-&gt;getRecords('A', 'MX'); // returns both A and MX records
$dns-&gt;getRecords(['A', 'MX']); // returns both A and MX records
</code></pre>
<p>The actual lookup of dns records inside that package is being done by calling <a href="http://www.thegeekstuff.com/2012/02/dig-command-examples/"><code>dig</code></a>, a command line tool to lookup dns related info.</p>
<p>Here is the relevant function inside <a href="https://github.com/spatie/dns/blob/master/src/Dns.php">the <code>Spatie\Dns\Dns</code> class</a> where that call happens.</p>
<pre><code>protected function getRecordsOfType(string $type): string
{
    $command = 'dig +nocmd '.escapeshellarg($this-&gt;domain)." {$type} +multiline +noall +answer";

    $process = new Process($command);

    $process-&gt;run();

    if (! $process-&gt;isSuccessful()) {
        throw new Exception('Dns records could not be fetched');
    }

    return $process-&gt;getOutput();
}
</code></pre>
<h3>In closing</h3>
<p>I hope you've enjoyed this little behind the scenes of <a href="https://dnsrecords.io"><a href="https://dnsrecords.io">https://dnsrecords.io</a></a>. I'd like to emphasise that creating this service was a <a href="https://spatie.be/en/team">team</a> effort. Every member of our team helped with making the code better. We also got some great contributions from the community for which we are grateful.</p>
<p>This is not the first project that we've open sourced. If you like to see some more work by our team, take a look at our <a href="https://murze.be/2017/06/building-realtime-dashboard-powered-laravel-vue-2017-edition/">Dashboard</a>, or the many <a href="https://spatie.be/en/opensource/laravel">Laravel</a>, <a href="https://spatie.be/en/opensource/php">PHP</a> and <a href="https://spatie.be/en/opensource/javascript">JavaScript</a> packages we created previously. Want to support our open source efforts? Then consider, becoming <a href="https://www.patreon.com/spatie">a patreon</a>.</p>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[What I&#039;ve learned after giving 100 talks]]></title>
            <link rel="alternate" href="https://murze.be/what-ive-learned-after-giving-100-talks" />
            <id>https://murze.be/892</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://twitter.com/zenorocha">Zeno Racha</a> wrote down some of his thoughts around public speaking. I've not given as much talks as he has but surely agree with everything in his post.</p>
<blockquote>Having 10 years of experience on something is nice, but don’t wait for it to get started. The best speakers I've seen are not the ones who knows all the in’s and out’s about a certain topic.

Here's the secret that nobody will tell you — the only requirement for giving a talk is passion. That’s it. No diploma, no famous project, no masters degree, no nothing. All you need is passion.</blockquote>
<p><a href="https://medium.com/@zenorocha/what-ive-learned-after-giving-100-talks-8f175654e945"><a href="https://medium.com/@zenorocha/what-ive-learned-after-giving-100-talks-8f175654e945">https://medium.com/@zenorocha/what-ive-learned-after-giving-100-talks-8f175654e945</a></a></p>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Backup multiple sites and frameworks with Laravel Backup]]></title>
            <link rel="alternate" href="https://murze.be/backup-multiple-sites-and-frameworks-with-laravel-backup" />
            <id>https://murze.be/891</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://twitter.com/timacdonald87">Tim MacDonald</a>, a freelance software developer living in Australia, wrote down how he used <a href="https://docs.spatie.be/laravel-backup/v5/introduction">our backup package</a> to backup his Laravel and Wordpress sites.</p>
<blockquote>I’m not going to run you through the standard setup or all the great features of the package here, you should definitely get your feet wet and give it a go. You’ll be up and running with backups in no time at all. From here on I’ll assume you’ve had some experience with the package, as to not over explain every step along the way…I do tend to rant off topic otherwise ?

I wanted to have a standardised backup system in place for all my sites. This system would have to include Laravel and WordPress installs - so I tinkered with Spatie’s Laravel Backup package and have managed to get a single install of Laravel to backup all my sites independently, including my WordPress sites ?</blockquote>
<p><a href="https://timacdonald.me/backup-multiple-sites-frameworks-laravel-backup/"><a href="https://timacdonald.me/backup-multiple-sites-frameworks-laravel-backup/">https://timacdonald.me/backup-multiple-sites-frameworks-laravel-backup/</a></a></p>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Writing code that speaks]]></title>
            <link rel="alternate" href="https://murze.be/writing-code-that-speaks" />
            <id>https://murze.be/890</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://github.com/calebporzio">Caleb Porzio</a> gives some good advice on how to make code more readable in this talk given at <a href="https://eriedayofcode.com/">Erie Day of Code 2017</a>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/aeUyTkUCb6U?rel=0" frameborder="0" allowfullscreen></iframe>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[A few ways to clean up conditional code]]></title>
            <link rel="alternate" href="https://murze.be/a-few-ways-to-clean-up-conditional-code" />
            <id>https://murze.be/889</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">A few ways to clean up the conditional code that forms most of your codebase. From simple to nested to spotting unnecessary conditions. ? <a href="https://t.co/qGVaDl3TKt">pic.twitter.com/qGVaDl3TKt</a></p>&mdash; Jason McCreary (@gonedark) <a href="https://twitter.com/gonedark/status/923557577593458689?ref_src=twsrc%5Etfw">October 26, 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Lies you&#039;ve been told about testing]]></title>
            <link rel="alternate" href="https://murze.be/lies-youve-been-told-about-testing" />
            <id>https://murze.be/888</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>In his excellent talk given at Laracon Online 2017, <a href="https://twitter.com/adamwathan">Adam Wathan</a> argues that testing in isolation leads to brittle test and that integration tests are much more valuable.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/LdUKfbG713M?rel=0" frameborder="0" allowfullscreen></iframe>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Easily use Laravel policy methods]]></title>
            <link rel="alternate" href="https://murze.be/easily-use-laravel-policy-methods" />
            <id>https://murze.be/887</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">?❗ You can add custom methods to your <a href="https://twitter.com/hashtag/laravel?src=hash&amp;ref_src=twsrc%5Etfw">#laravel</a> policies and use them with &quot;kebab-case&quot;. <a href="https://t.co/cRjctkuI80">pic.twitter.com/cRjctkuI80</a></p>&mdash; Sven (@svenluijten) <a href="https://twitter.com/svenluijten/status/924393468151107584?ref_src=twsrc%5Etfw">October 28, 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Improving the performance of PhpStorm]]></title>
            <link rel="alternate" href="https://murze.be/improving-the-performance-of-phpstorm" />
            <id>https://murze.be/886</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://www.jetbrains.com/phpstorm/">PhpStorm</a> is a fantastic editor. Unfortunately it can be quite slow. <a href="https://twitter.com/brendt_gd">Brent</a>, one of our developers at <a href="https://spatie.be">Spatie</a>, blogged a few tips to make it run a bit faster. I've followed all his suggestions and PhpStorm now feels a bit more responsive.</p>
<blockquote>I didn't start this post by writing my own thoughts, because I figured people were looking for some quick tips to speed of their IDE. As a PHP developer, I think that PhpStorm is such a powerful tool, which helps me to write good and maintainable code. I don't want it to stand in my way though, so good performance is an absolute requirement.</blockquote>
<p><a href="https://www.stitcher.io/blog/phpstorm-performance"><a href="https://www.stitcher.io/blog/phpstorm-performance">https://www.stitcher.io/blog/phpstorm-performance</a></a></p>
<p>Hopefully future versions of PhpStorm will be more performant out of the box.</p>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Debugging the dreaded &quot;Class log does not exist&quot; error in Laravel]]></title>
            <link rel="alternate" href="https://murze.be/debugging-the-dreaded-class-log-does-not-exist-error-in-laravel" />
            <id>https://murze.be/885</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>My colleague <a href="https://twitter.com/sebdedeyne">Sebastian</a> took the time to write down the solution to a problem many artisans will come across at some point in time. I hope that in a future version of Laravel that error message will be improved so that it makes clear what the actual problem really is.</p>
<blockquote>Every now and then I come across a Class log does not exist exception in Laravel. This particular exception is thrown when something goes wrong really early in the application, before the exception handler is instantiated.

Whenever I come across this issue I'm stumped. Mostly it's related to an invalid configuration issue or an early service provider that throws an exception. I always forget how to debug this, so it's time to document my solution for tracking down the underlying error.</blockquote>
<p><a href="https://sebastiandedeyne.com/posts/2017/debugging-the-dreaded-class-log-does-not-exist-error-in-laravel"><a href="https://sebastiandedeyne.com/posts/2017/debugging-the-dreaded-class-log-does-not-exist-error-in-laravel">https://sebastiandedeyne.com/posts/2017/debugging-the-dreaded-class-log-does-not-exist-error-in-laravel</a></a></p>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Carbon is macroable in Laravel 5.5]]></title>
            <link rel="alternate" href="https://murze.be/carbon-is-macroable-in-laravel-55" />
            <id>https://murze.be/884</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Just a little reminder that Carbon is macroable in <a href="https://twitter.com/hashtag/Laravel?src=hash&amp;ref_src=twsrc%5Etfw">#Laravel</a> 5.5 <a href="https://t.co/6l7F883c7N">pic.twitter.com/6l7F883c7N</a></p>&mdash; Freek Van der Herten (@freekmurze) <a href="https://twitter.com/freekmurze/status/922223502933053440?ref_src=twsrc%5Etfw">October 22, 2017</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Introducing Clockwork 2.0]]></title>
            <link rel="alternate" href="https://murze.be/introducing-clockwork-20" />
            <id>https://murze.be/883</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://github.com/itsgoingd/clockwork">Clockwork</a> is Laravel package, made by <a href="https://twitter.com/itsgoingd">itsgoingd</a>, that can collect a lot of helpful info such as queries executed, views loaded, route used, ... Unlike the popular <a href="https://github.com/barryvdh/laravel-debugbar">laravel-debugbar</a> package, Clockwork will not inject extra stuff into the html itself. All collected info is displayed in the developer tools of your browser (you'll need to install an extension first).</p>
<img src="/uploads/2017/10/ui-refresh-700x470.png" alt="" width="700" height="470" class="alignnone size-large wp-image-5292" />
<p><a href="https://underground.works/blog/introducing-clockwork-2.0"><a href="https://underground.works/blog/introducing-clockwork-2.0">https://underground.works/blog/introducing-clockwork-2.0</a></a></p>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[★ A Laravel package to log HTTP requests]]></title>
            <link rel="alternate" href="https://murze.be/a-laravel-package-to-log-http-requests" />
            <id>https://murze.be/882</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>Most of the sites we build for our clients contain some sort of contact form. For those client such forms are potentially critical to their business. Imagine for instance a real estate firm that generates leads with such forms. In most cases we will store the submitted values in the db and mail them out to our client. But what if the database is down? For that case we wanted to have an extra safety net and that's why we created <a href="https://github.com/spatie/laravel-http-logger">our new laravel-http-logger package</a>.</p>
<p>The package contains a middleware that, applied to a route, will log the entire request.</p>
<pre><code>// in a routes file

Route::post('/submit-form', function () {
    //
})-&gt;middleware(\Spatie\HttpLogger\Middlewares\HttpLogger::class);
</code></pre>
<p>The package supports some nice options such as filtering out some fields from the request, and you can determine how requests should be logged.</p>
<p>To learn more check out the package <a href="https://github.com/spatie/laravel-http-logger">on GitHub</a>.</p>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[★ Introducing Browsershot v3: the best way to convert html to PDFs and images]]></title>
            <link rel="alternate" href="https://murze.be/introducing-browsershot-v3-the-best-way-to-convert-html-to-pdfs-and-images" />
            <id>https://murze.be/881</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>To convert html to a pdf or an image using <a href="https://wkhtmltopdf.org/">wkhtmltopdf and wkhtmltoimage</a> tends to be <a href="https://www.reddit.com/r/PHP/comments/764whz/best_library_to_create_pdf_from_some_sort_of_html/">the popular option</a>. Unfortunately those tools contain an outdated browser engine to do their thing, so you can't use any newish css syntax. A while ago Google added a <a href="https://developers.google.com/web/updates/2017/04/headless-chrome">headless mode</a> to Chrome. They've also released a javascript library called <a href="https://github.com/GoogleChrome/puppeteer">Puppeteer</a> that gives you programmatic and fine grained control over Chrome.</p>
<p>Wouldn't it be great if we could just use Chrome and Puppeteer to convert html to PDFs and images? <a href="https://github.com/spatie/browsershot">Browsershot</a> is package that does exactly that. In this post I'd like to introduce v3 of Browsershot, which was recently released.</p>
<h2>Basic usage</h2>
<p>To be able to use the package Puppeteer should be installed on your system. Luckily this is an easy process. The readme of Browsershot mentions <a href="https://github.com/spatie/browsershot#requirements">the steps to install it</a>.</p>
<p>Here are a few examples of what the package can do:</p>
<pre><code>use Spatie\Browsershot\Browsershot;

// an image will be saved
Browsershot::url('https://example.com')-&gt;save($pathToImage);
</code></pre>
<p>It will save a pdf if the path passed to the <code>save</code> method has a <code>pdf</code> extension.</p>
<pre><code>// a pdf will be saved
Browsershot::url('https://example.com')-&gt;save('example.pdf');
</code></pre>
<p>You can also use an arbitrary html input, simply replace the <code>url</code> method with <code>html</code>:</p>
<pre><code>Browsershot::html('&lt;h1&gt;Hello world!!&lt;/h1&gt;')-&gt;save('example.pdf');
</code></pre>
<p>Browsershot also can get the body of an html page after JavaScript has been executed:</p>
<pre><code>Browsershot::url('https://example.com')-&gt;bodyHtml(); // returns the html of the body
</code></pre>
<h2>Advanced usage</h2>
<p>The examples above could all be achieved by using <a href="https://murze.be/2017/07/easily-covert-webpages-to-images-using-php/">v2 of Browsershot</a> which leveraged headless chrome without Puppeteer. I'm very grateful for <a href="https://github.com/spatie/browsershot/pull/85">this awesome PR</a> by <a href="https://twitter.com/itsgoingd">itsgoingd</a> which added integration for Puppeteer and formed the basis for v3 of Browsershot. Using Puppeteer unlocks awesome new possibilities.</p>
<p>You can take now take a screenshot of the full length of the page.</p>
<pre><code>Browsershot::url('https://example.com')
    -&gt;fullPage()
    -&gt;save($pathToImage);
</code></pre>
<p>Pdf's can now be landscape oriented.</p>
<pre><code>Browsershot::html($someHtml)
   -&gt;landscape()
   -&gt;save('example.pdf');
</code></pre>
<p>You can specify the width and the height in millimeters.</p>
<pre><code>Browsershot::html($someHtml)
   -&gt;paperSize($width, $height)
   -&gt;save('example.pdf');
</code></pre>
<p>Margins can be set as well.</p>
<pre><code>Browsershot::html($someHtml)
   -&gt;margins($top, $right, $bottom, $left)
   -&gt;save('example.pdf');
</code></pre>
<h2>Behind the scenes</h2>
<p>Let's take a look on how a JavaScript library like Puppeteer can be called from within a PHP package.</p>
<p>When calling <code>save</code> the package will <a href="https://github.com/spatie/browsershot/blob/22c6845f2809089a79a6178c6835fe7562b147ec/src/Browsershot.php#L292-L333">build up an array</a> which all of the options that have been set.</p>
<pre><code>public function createPdfCommand($targetPath): array
{
    $url = $this-&gt;html ? $this-&gt;createTemporaryHtmlFile() : $this-&gt;url;

    $command = $this-&gt;createCommand($url, 'pdf', ['path' =&gt; $targetPath]);

    if ($this-&gt;showBrowserHeaderAndFooter) {
        $command['options']['displayHeaderFooter'] = true;
    }

    if ($this-&gt;showBackground) {
        $command['options']['printBackground'] = true;
    }
...
}
</code></pre>
<p>The next interesting thing happens in <a href="https://github.com/spatie/browsershot/blob/22c6845f2809089a79a6178c6835fe7562b147ec/src/Browsershot.php#L375-L398">the <code>callBrowser</code> function</a>. Here we will convert that array we've built up (it's being passed to the function as <code>$command</code>) to json. We'll start a process that will let node execute a JavaScript function contained in the <code>bin/browser.js</code> file in the package.</p>
<pre><code>protected function callBrowser(array $command)
{
   $setIncludePathCommand = "PATH={$this-&gt;includePath}";

   $setNodePathCommand = "NODE_PATH=`{$this-&gt;nodeBinary} {$this-&gt;npmBinary} root -g`";

   $binPath = __DIR__.'/../bin/browser.js';

   $fullCommand =
       $setIncludePathCommand.' '
       .$setNodePathCommand.' '
       .$this-&gt;nodeBinary.' '
       .escapeshellarg($binPath).' '
       .escapeshellarg(json_encode($command));

   $process = (new Process($fullCommand))-&gt;setTimeout($this-&gt;timeout);

   $process-&gt;run();

   if (! $process-&gt;isSuccessful()) {
       throw new ProcessFailedException($process);
   }

   return $process-&gt;getOutput();
}
</code></pre>
<p>Let's take a look at that <a href="https://github.com/spatie/browsershot/blob/e1ada21/bin/browser.js"><code>browser.js</code></a> file. I've added some inline comments to make things more clear.</p>
<pre><code>const puppeteer = require('puppeteer');

//here we convert the json with all the conversion options to a JavaScript object
const request = JSON.parse(process.argv[2]);

const callChrome = async () =&gt; {
    let browser;
    let page;

    try {

        // let's launch headless chrome
        browser = await puppeteer.launch();

        // here we create a new page
        page = await browser.newPage();

        // build up options, omitted in this blog post
        ...

        // and here we set the url of that page and pass all the requested options
        await page.goto(request.url, requestOptions);

        await browser.close();
    } catch (exception) {
        if (browser) {
            await browser.close();
        }

        process.exit(1);
    }
};

// do the magic!
callChrome();
</code></pre>
<h2>In closing</h2>
<p>Personally I probably won't use wkhtmltopdf or wkhtmltoimage again in the foreseeable future. If you need to convert html to a pdf or an image, be sure to take Browsershot for a spin. In this blogpost we've touched upon some of the stuff the package can do. But there are many many more options. Head over to <a href="https://github.com/spatie/browsershot">the readme of Browsershot on GitHub</a> to learn more.</p>
<p>I'm pretty sure that headless Chrome, Puppeteer and Browsershot will gain more nice functionalities in the future.</p>
<p>If you need to create pdfs that need to go to a printing office where it needs to adhere to a certain pdf or color standard, it's probably better to use something that gives you more fine grained control, like <a href="https://www.latex-project.org/">Latex</a> or <a href="https://docraptor.com/">Docraptor</a>.</p>
<p>If you like Browsershot, take a look at the <a href="https://spatie.be/en/opensource/php">PHP</a> and <a href="https://spatie.be/en/opensource/laravel">Laravel</a> packages our team has previously released.</p>]]>
            </summary>
            <updated>2017-11-29T19:38:42+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[A few different ways to style inputs]]></title>
            <link rel="alternate" href="https://murze.be/a-few-different-ways-to-style-inputs" />
            <id>https://murze.be/880</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<blockquote class="twitter-tweet" data-lang="nl"><p lang="en" dir="ltr">? Little details go a long way when styling UI components. Here are a few different ways to style inputs: <a href="https://t.co/1D2AYDwi1f">pic.twitter.com/1D2AYDwi1f</a></p>&mdash; Steve Schoger (@steveschoger) <a href="https://twitter.com/steveschoger/status/920706913624625152?ref_src=twsrc%5Etfw">18 oktober 2017</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[How to remove a big file wrongly committed to a Git repo]]></title>
            <link rel="alternate" href="https://murze.be/how-to-remove-a-big-file-wrongly-committed-to-a-git-repo" />
            <id>https://murze.be/879</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>Today I accidentally committed a multi GB file to the git repo of the project I was working on and pushed it. Damn! Because of that big file cloning the repo again would take a long long time. Removing the file locally and pushing again would not solve the problem as that big file is in Git's history.</p>
<p>So I took a few moments to Google around and learned that that there actually is a git command that can rewrite history: <a href="https://git-scm.com/docs/git-filter-branch"><code>filter-branch</code></a>. This is how I removed that big file from history:</p>
<pre><code>git filter-branch --tree-filter 'rm path/to/your/bigfile' HEAD

git push origin master --force
</code></pre>
<p>Both commands took a while to complete, but after that I had a light repo again.</p>
<p>If you need to do this, be sure to keep a copy of your repo around in case something goes wrong.</p>
<p>Here's an old, but still seemingly still correct blogpost by <a href="https://twitter.com/dnasevic">Dalibor Nasevic</a> with some more info on the subject.</p>
<blockquote>Few weeks ago I froze gems on my blog and ended up with a very big repository. So, I wanted to clean up the mess and remove permanently gems folder from the repository. git rm wasn't doing the job well, it only removes the folder from the working tree and the repository still contains the objects of this folder. After a quick search, I found that git-filter-branch was the command I was looking for.</blockquote>
<p><a href="https://dalibornasevic.com/posts/2-permanently-remove-files-and-folders-from-a-git-repository"><a href="https://dalibornasevic.com/posts/2-permanently-remove-files-and-folders-from-a-git-repository">https://dalibornasevic.com/posts/2-permanently-remove-files-and-folders-from-a-git-repository</a></a></p>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Dockerize your Laravel app with Vessel]]></title>
            <link rel="alternate" href="https://murze.be/dockerize-your-laravel-app-with-vessel" />
            <id>https://murze.be/878</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://twitter.com/fideloper">Chris Fidao</a> has created an easy to handle, well documented, Docker dev environment for Laravel projects. It's an excellent starting point if you want to have a taste of what Docker can do.</p>
<p>For the introductory newsletter:</p>
<blockquote>I like Vessel the best for the following reasons:
1. It's installed per-project instead of globally. This lets me customize it per project if need be.
2. Docker lets me change out versions of software such as Nginx, MySQL, Redis, and others very easily. (I've often needed to use an older MySQL version at work)
3. Docker lets me add extra software (perhaps Beanstalkd for queues, or PgSQL for database) really easily
4. Docker containers are more like processes than VMs. They generally only use what resources they need (with some caveats, but even with those, they're lighter than Vagrant virtual machines)
5. I can fill up my workstation with one technology (Docker!) instead of many (PHP, Redis, MySQL, etc) with all their configuration files and data strewn about all over my file system
6. You can expand on your dev workflow to build up to a production workflow using all the same technology (Docker!)  - You can check out Shipping Docker for my full course on bringing Docker from dev into production.</blockquote>
<p><a href="https://vessel.shippingdocker.com"><a href="https://vessel.shippingdocker.com">https://vessel.shippingdocker.com</a></a></p>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Write tests. Not too many. Mostly integration.]]></title>
            <link rel="alternate" href="https://murze.be/write-tests-not-too-many-mostly-integration" />
            <id>https://murze.be/877</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>In a fantastic post on his blog, <a href="https://twitter.com/kentcdodds">Kent C. Dodds</a> makes the case for focusing on writing integration tests, and stop going for 100% code coverage. Amen to that!</p>
<blockquote>You may also find yourself testing implementation details just so you can make sure you get that one line of code that’s hard to reproduce in a test environment. You really want to avoid testing implementation details because it doesn’t give you very much confidence that your application is working and it slows you down when refactoring. You should very rarely have to change tests when you refactor code.</blockquote>
<p><a href="https://blog.kentcdodds.com/write-tests-not-too-many-mostly-integration-5e8c7fff591c"><a href="https://blog.kentcdodds.com/write-tests-not-too-many-mostly-integration-5e8c7fff591c">https://blog.kentcdodds.com/write-tests-not-too-many-mostly-integration-5e8c7fff591c</a></a></p>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[The official Vue.js style guide]]></title>
            <link rel="alternate" href="https://murze.be/the-official-vuejs-style-guide" />
            <id>https://murze.be/876</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>The maintainers of <a href="https://vuejs.org">Vue.js</a> have recently published their official style guide.</p>
<blockquote>This is the official style guide for Vue-specific code. If you use Vue in a project, it’s a great reference to avoid errors, bikeshedding, and anti-patterns. However, we don’t believe that any style guide is ideal for all teams or projects, so mindful deviations are encouraged based on past experience, the surrounding tech stack, and personal values.

For the most part, we also avoid suggestions about JavaScript or HTML in general. We don’t mind whether you use semicolons or trailing commas. We don’t mind whether your HTML uses single-quotes or double-quotes for attribute values. Some exceptions will exist however, where we’ve found that a particular pattern is helpful in the context of Vue.</blockquote>
<p><a href="https://vuejs.org/v2/style-guide/"><a href="https://vuejs.org/v2/style-guide/">https://vuejs.org/v2/style-guide/</a></a></p>
<p>Want to see some more style guides? At <a href="https://spatie.be/en">Spatie</a> we have a guidelines site containing styleguides for Laravel and JavaScript.</p>
<blockquote>This site contains a set of guidelines we use to bring our projects to a good end. We decided to document our workflow because consistency is one of the most valuable traits of maintainable software.

The contents of this site exist for ourselves—more importantly, our future selves—and for giving future collegues a reference to our way of doing things and their quirks. The guidelines cover workflow, code style, and other little things we consider worth documenting.</blockquote>
<p><a href="https://guidelines.spatie.be"><a href="https://guidelines.spatie.be">https://guidelines.spatie.be</a></a></p>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Facades can mock stuff partially]]></title>
            <link rel="alternate" href="https://murze.be/facades-can-mock-stuff-partially" />
            <id>https://murze.be/875</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Need to mock a specific method in a facade, leaving the remainder free to respond to calls normally? It&#39;s possible with &quot;Partial Mocks&quot;. <a href="https://t.co/VgVMdnBDid">pic.twitter.com/VgVMdnBDid</a></p>&mdash; Raul (@rcubitto) <a href="https://twitter.com/rcubitto/status/915643116408987649?ref_src=twsrc%5Etfw">October 4, 2017</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Seven Ineffective Coding Habits of Many Programmers]]></title>
            <link rel="alternate" href="https://murze.be/seven-ineffective-coding-habits-of-many-programmers" />
            <id>https://murze.be/874</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>At last years <a href="http://www.istanbultechtalks.com/">Istanbul Tech Talks conference</a> <a href="https://twitter.com/KevlinHenney">Kevelin Henney</a> gave this great talk on how to improve the readability of your code.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/ZsHMHukIlJY" frameborder="0" allowfullscreen></iframe>
<p>Here are <a href="https://www.slideshare.net/Kevlin/seven-ineffective-coding-habits-of-many-programmers-42301681">the slides of this talk</a>.</p>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Deep dive into Electron’s main and renderer processes]]></title>
            <link rel="alternate" href="https://murze.be/deep-dive-into-electrons-main-and-renderer-processes" />
            <id>https://murze.be/873</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>In a post on his Medium blog <a href="https://twitter.com/ccnokes">Cameron Nokes</a> explains the two most important processes in any Electron app: the main process and the renderer process.</p>
<blockquote>Central to Electron is the concept of two or more operating system level processes running concurrently — the “main” and “renderer” processes. Dealing with multiple processes is new territory if you’re coming from browser Javascript land. It was definitely a paradigm shift for me initially, and working with multiple processes may mean you make different design choices in your app that you wouldn’t otherwise.</blockquote>
<p><a href="https://medium.com/@ccnokes/deep-dive-into-electrons-main-and-renderer-processes-7a9599d5c9e2"><a href="https://medium.com/@ccnokes/deep-dive-into-electrons-main-and-renderer-processes-7a9599d5c9e2">https://medium.com/@ccnokes/deep-dive-into-electrons-main-and-renderer-processes-7a9599d5c9e2</a></a></p>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Quickly build a single event sourced feature built with Elixir]]></title>
            <link rel="alternate" href="https://murze.be/quickly-build-a-single-event-sourced-feature-built-with-elixir" />
            <id>https://murze.be/872</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>In a short video posted on YouTube, <a href="https://twitter.com/ShawnMcCool">Shawn McCool</a> explains how you can quickly build an event sourced featured with <a href="https://github.com/slashdotdash/commanded">Commanded</a>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/n7v73Rbk670" frameborder="0" allowfullscreen></iframe>]]>
            </summary>
            <updated>2017-11-17T15:21:56+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Asynchronous stack traces: why await beats .then()]]></title>
            <link rel="alternate" href="https://murze.be/asynchronous-stack-traces-why-await-beats-then" />
            <id>https://murze.be/871</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>On his blog <a href="https://twitter.com/mathias">Mathias Bynens</a> explains the differences under the hood between async/await and vanilla promises.</p>
<blockquote>The fundamental difference between await and vanilla promises is that await X() suspends execution of the current function, while promise.then(X) continues execution of the current function after adding the X call to the callback chain. In the context of stack traces, this difference is pretty significant.
...
Enable JavaScript engines to handle stack traces in a more performant and memory-efficient manner by following these recommendations:

- Prefer async/await over desugared promises.
- Use babel-preset-env to avoid transpiling async/await unnecessarily.
...</blockquote>
<p><a href="https://mathiasbynens.be/notes/async-stack-traces"><a href="https://mathiasbynens.be/notes/async-stack-traces">https://mathiasbynens.be/notes/async-stack-traces</a></a></p>]]>
            </summary>
            <updated>2017-11-17T15:21:55+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[★ Handling Stripe webhooks in a Laravel application]]></title>
            <link rel="alternate" href="https://murze.be/handling-stripe-webhooks-in-a-laravel-application" />
            <id>https://murze.be/870</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>In the project I'm currently working on I had to integrate <a href="https://stripe.com">Stripe</a> webhooks. Stripe has <a href="https://stripe.com/docs/webhooks">great documentation on how to handle webhooks</a>, but it still took a fair amount of time to get the integration just right. My solution for handling webhooks is pretty generic and reusable by others. I decided to extract it to <a href="https://github.com/spatie/laravel-stripe-webhooks">a package called laravel-stripe-webhooks</a>, so nobody has to code this stuff up again.  In this blogpost I'd like to share how the package works.</p>
<h2>Requests will be validated</h2>
<p>Whenever an event occurs on Stripe, the service will notify your app by sending a http request to your app. Here's <a href="https://stripe.com/docs/api#event_types">a list of all events Stripe sends out</a>.  Stripe will sign all requests it sends to your app. This package will automatically verify if the signature is valid. If it is not, the request was probably not sent be Stripe.</p>
<h2>Webhooks are restartable</h2>
<p>Before doing any other work, <a href="https://github.com/spatie/laravel-stripe-webhooks/blob/cd299c5d5bcd67a35e412b60833c057867584876/src/StripeWebhooksController.php#L23-L26">all calls will immediately be logged to the database</a>. This is incredibly valueable when something goes wrong handling a webhook call. You can easily retry the processing of the webhook call, after you investigated and fixed the cause of failure, like this:</p>
<pre><code>use Spatie\StripeWebhooks\StripeWebhookCall;

StripeWebhookCall::find($id)-&gt;process();
</code></pre>
<h2>Handling valid requests</h2>
<p>There are two ways this package enables you to handle webhook requests: you can opt to queue a job or listen to the events the package will fire. In both cases we highly recommend queuing the job or queueing the event listener that does some work. By doing that, you can minimize the response time of the webhook requests. This allows you to handle more stripe webhook requests and avoiding timeouts.</p>
<p>Let's take a look at both methods.</p>
<h3>Using jobs</h3>
<p>Laravel has a handy <code>make</code> command to scaffold a <code>Job.</code></p>
<pre><code>php artisan make:job ChargeSource
</code></pre>
<p>After that you must let the job accept a <code>WebhookCall</code> instance in it's handle method.</p>
<pre><code>namespace App\Listeners;

use Illuminate\Contracts\Queue\ShouldQueue;
use Spatie\StripeWebhooks\StripeWebhookCall;

class ChargeSource implements ShouldQueue
{
    public function handle(StripeWebhookCall $call)
    {
        // do your work here

        // you can access the payload of the webhook call with `$webhookCall-&gt;payload`
    }   
}
</code></pre>
<p>After having created your job you must register it at the jobs array in the <code>stripe-webhooks.php</code> config file. The key should be the name of the stripe event type where but with the <code>.</code> replaced by <code>_</code>. The value should be the fully qualified name of the class.</p>
<pre><code>// config/stripe-webhooks.php

'jobs' =&gt; [
    'source_chargeable' =&gt; \App\Jobs\StripeWebhooks\HandleChargeableSource::class,
],
</code></pre>
<p>And with that you job will fire when strips sends out the <code>source.chargeable</code> webhook.</p>
<h3>Using events</h3>
<p>Instead of queueing jobs to perform some work when a webhook request comes in, you can opt to listen to the events this package will fire. Whenever a valid request hits your app the package will fire a <code>stripe-webhooks::&lt;name-of-the-event&gt;</code>. For if a <code>source.chargeable</code> event hits your app, the <code>stripe-webhooks::source.chareable</code> event will fire.</p>
<p>Let's take a look at how you can listen for such an event. In the <code>EventServiceProvider</code> you can register a listener.</p>
<pre><code>/**
 * The event listener mappings for the application.
 *
 * @var array
 */
protected $listen = [
    'stripe-webhooks::source.chargeable' =&gt; [
        App\Listeners\ChargeSource::class,
    ],
];
</code></pre>
<p>Here's an example of such a listener:</p>
<pre><code>namespace App\Listeners;

use Illuminate\Contracts\Queue\ShouldQueue;
use Spatie\StripeWebhooks\StripeWebhookCall;

class ChargeSource implements ShouldQueue
{
    public function handle(StripeWebhookCall $call)
    {
        // do your work here

        // you can access the payload of the webhook call with `$webhookCall-&gt;payload`
    }   
}
</code></pre>
<p>Like already mentioned above, we highly recommend that you make the event listener queueable.</p>
<p>The above example is only one way to handle events in a Laravel. To learn the other options, read <a href="https://laravel.com/docs/5.5/events">the Laravel documentation on handling events</a>.</p>
<h2>In closing</h2>
<p>Head over to <a href="https://github.com/spatie/laravel-stripe-webhooks">the readme of laravel-stripe-webhooks on GitHub</a> to learn a few more tidbits about the package. Rest assured that the package contains <a href="https://github.com/spatie/laravel-stripe-webhooks/tree/master/tests">a suite of tests</a> to make sure everything works correctly.</p>
<p>Because Stripe is quite popular, I can image that a lot of artisans already have written their own implementation for handling webhooks. In my mind it's kind of silly that everybody has to code up the same solution over and over again. If you tackle a problem concerning common stuff consider open sourcing your solution. You will benefit yourself from the public scrutinization of your code (in mean this in a positive way). Your future self will be thankful for the documentation you write for your package. The other members of the community will be saved from writing the same boring code. And we all can get to building the fun and interesting stuff.</p>
<p>If you're in a position in your company to advocate or to actively work on open source, I highly recommend you do so. There are only winners in this story!</p>
<p>That being said, be sure to take a look at the collection of Laravel, PHP and JavaScript packages our team has created:</p>
<ul>
<li><a href="https://spatie.be/en/opensource/laravel">https://spatie.be/en/opensource/laravel</a></li>
<li><a href="https://spatie.be/en/opensource/php">https://spatie.be/en/opensource/php</a></li>
<li><a href="https://spatie.be/en/opensource/JavaScript">https://spatie.be/en/opensource/JavaScript</a></li>
</ul>
<p>Pretty sure there will be something there that can be helpful in one of your future projects.</p>]]>
            </summary>
            <updated>2017-11-17T15:21:55+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Laravel&#039;s rescue helper]]></title>
            <link rel="alternate" href="https://murze.be/laravels-rescue-helper" />
            <id>https://murze.be/869</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">⚡️. <a href="https://twitter.com/laravelphp?ref_src=twsrc%5Etfw">@laravelphp</a> rescue() helper : Catch a potential exception and return a default value <a href="https://twitter.com/hashtag/laravel?src=hash&amp;ref_src=twsrc%5Etfw">#laravel</a> 5.5.3 <a href="https://t.co/Y8bRlx1gUc">pic.twitter.com/Y8bRlx1gUc</a></p>&mdash; Jeff (@Jeffer_8a) <a href="https://twitter.com/Jeffer_8a/status/906249454990364678?ref_src=twsrc%5Etfw">September 8, 2017</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]>
            </summary>
            <updated>2017-11-17T15:21:55+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Fuzzy searching for changed files in GitHub PRs]]></title>
            <link rel="alternate" href="https://murze.be/fuzzy-searching-for-changed-files-in-github-prs" />
            <id>https://murze.be/868</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">? Tip of the Day<br><br>Press T while in a Github Pull Request to get a fuzzy search for all changed files. ? <a href="https://t.co/LOQsJ9z0vZ">pic.twitter.com/LOQsJ9z0vZ</a></p>&mdash; Jacob Bennett (@JacobBennett) <a href="https://twitter.com/JacobBennett/status/912673571545272321?ref_src=twsrc%5Etfw">September 26, 2017</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]>
            </summary>
            <updated>2017-11-17T15:21:55+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Essential image optimization]]></title>
            <link rel="alternate" href="https://murze.be/essential-image-optimization" />
            <id>https://murze.be/867</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://twitter.com/addyosmani">Addy Osmani</a>, a Google Chrome engineer, recently published a e-book on image optimization. You can read it in it's entirety here: <a href="https://images.guide/"><a href="https://images.guide/">https://images.guide/</a></a></p>
<blockquote>Images take up massive amounts of internet bandwidth because they often have large file sizes. According to the HTTP Archive, 60% of the data transferred to fetch a web page is images composed of JPEGs, PNGs and GIFs. As of July 2017, images accounted for 1.7MB of the content loaded for the 3.0MB average site.

Per Tammy Everts, adding images to a page or making existing images larger have been proven to increase conversion rates. It's unlikely that images will go away and so investing in an efficient compression strategy to minimize bloat becomes important.</blockquote>
<p>If you need to optimize images in your PHP application take a look at <a href="https://github.com/spatie/image-optimizer">our image optimization package</a>. If you're a Laravel user you'll be happy to know that there's also <a href="https://github.com/spatie/laravel-image-optimizer">a Laravel version of the optimizer</a>. <a href="https://docs.spatie.be/laravel-medialibrary/v6/introduction">Our Laravel Medialibrary</a> also comes with <a href="https://docs.spatie.be/laravel-medialibrary/v6/converting-images/optimizing-converted-images">built-in support for optimizing images</a>.</p>]]>
            </summary>
            <updated>2017-11-17T15:21:55+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Nordic.js 2017 videos have been released]]></title>
            <link rel="alternate" href="https://murze.be/nordicjs-2017-videos-have-been-released" />
            <id>https://murze.be/866</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>Like the name implies <a href="http://nordicjs.com/">Nordic.js</a> is a  conference that focuses on JavaScript. The organisers recently released all videos of the 2017 edition. Even if you're not into JavaScript I can recommend this watch this video of <a href="https://twitter.com/harrietgl">Harriet Lawrence</a> on how you can use language to make your community more welcoming.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/ZrlIvclUBM0" frameborder="0" allowfullscreen></iframe>
<p>Here's <a href="https://www.youtube.com/watch?v=2v-3Cq09vnY&list=PLGP3VO5jDf8xpaeBAhJOJaEjt1C7sE5Sf">a YouTube playlist with all videos of Nordic.js 2017</a>.</p>
<p>My colleague Sebastian attended the conference, be sure to check out <a href="https://sebastiandedeyne.com/posts/2017/nordicjs-2017-recap">his recap</a>.</p>]]>
            </summary>
            <updated>2017-11-17T15:21:55+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Handling Stripe payments in Laravel]]></title>
            <link rel="alternate" href="https://murze.be/handling-stripe-payments-in-laravel" />
            <id>https://murze.be/865</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://twitter.com/povilaskorop">Povilas Korop</a>, creator of <a href="http://laraveldaily.com/">Laravel Daily</a> and <a href="https://quickadminpanel.com/">Quick Admin Panel</a>, wrote an extensive guide on how to integrate Stripe into a Laravel application.</p>
<blockquote>Stripe is one of the most popular payment merchants for web, but information about Laravel integration is pretty fragmented, so I decided to write a really long tutorial about this topic.

We will cover:

- General logic how Stripe works
- Simple one-time payment integration
- Testing and production environment setup
- Saving transaction data for future reference
- Recurring payments with Laravel Cashier
- Getting invoices data and PDF download</blockquote>
<p><a href="https://quickadminpanel.com/blog/stripe-payments-in-laravel-the-ultimate-guide/"><a href="https://quickadminpanel.com/blog/stripe-payments-in-laravel-the-ultimate-guide/">https://quickadminpanel.com/blog/stripe-payments-in-laravel-the-ultimate-guide/</a></a></p>]]>
            </summary>
            <updated>2017-11-17T15:21:55+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Real-time insights powered by reactive programming]]></title>
            <link rel="alternate" href="https://murze.be/real-time-insights-powered-by-reactive-programming" />
            <id>https://murze.be/864</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>In this talk <a href="https://twitter.com/jayphelps">Jay Phelps</a>, an engineer at Netflix, explains how Netflix using <a href="https://medium.com/@kevalpatel2106/what-is-reactive-programming-da37c1611382">reactive programming</a> to visualise a large stream of events.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/uODxUJ5Jwis" frameborder="0" allowfullscreen></iframe>]]>
            </summary>
            <updated>2017-11-17T15:21:55+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Partitioning for concurrency in synchronous business processes]]></title>
            <link rel="alternate" href="https://murze.be/partitioning-for-concurrency-in-synchronous-business-processes" />
            <id>https://murze.be/863</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>On his blog <a href="https://twitter.com/frankdejonge">Frank De Jonge</a>, member of <a href="https://thephpleague.com/">the PHP League</a> and creator of <a href="http://flysystem.thephpleague.com/">Flysystem</a>, explains a cool pragmatic solution how to ensure queued processes for the same user complete in the right order.</p>
<blockquote>The use of multiple workers allows for much higher throughput, but it also allows for race conditions during processing. When messages for the same user are sent to different workers, handling order can no longer be guaranteed. Therefore we have failed to fulfil our business rule.

If we were able to ensure every message from the same user were sent to the same worker, the worker could ensure those messages are handled in order while the system as a whole would still benefit from the degree of parallelism. But how do we make this happen?</blockquote>
<p><a href="https://blog.frankdejonge.nl/parallelise-synchronous-business-processes/"><a href="https://blog.frankdejonge.nl/parallelise-synchronous-business-processes/">https://blog.frankdejonge.nl/parallelise-synchronous-business-processes/</a></a></p>]]>
            </summary>
            <updated>2017-11-17T15:21:55+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[BetterReflection v2 has been released]]></title>
            <link rel="alternate" href="https://murze.be/betterreflection-v2-has-been-released" />
            <id>https://murze.be/862</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://twitter.com/RoaveTeam">The awesome Roave team</a> has recently released v2 of <a href="https://github.com/Roave/BetterReflection">their BetterReflection package</a>. It can do anything PHP's native reflection API can, but without actually autoloading the code.</p>
<blockquote>
The operational concept is quite simple, really:

1. We scan your codebase for files matching the one containing your class. This is fully configurable, but by default we use some ugly autoloader hacks to find the file without wasting disk I/O.
2. We feed your PHP file to PHP-Parser
3. We analyse the produced AST and wrap it in a matching Roave\BetterReflection\Reflection\* class instance, ready for you to consume it.</blockquote>
<p>Read all about it on <a href="https://twitter.com/Ocramius">Marco Pivetta</a>'s blog: <a href="https://ocramius.github.io/blog/roave-better-reflection-v2.0/"><a href="https://ocramius.github.io/blog/roave-better-reflection-v2.0/">https://ocramius.github.io/blog/roave-better-reflection-v2.0/</a></a></p>]]>
            </summary>
            <updated>2017-11-17T15:21:55+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[★ New features in our packages]]></title>
            <link rel="alternate" href="https://murze.be/new-features-in-our-packages" />
            <id>https://murze.be/861</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://murze.be/2016/09/taking-care-of-backups-with-laravel/">Every</a> <a href="https://murze.be/2015/10/a-fractal-service-provider-for-laravel/">time</a> <a href="https://murze.be/2016/02/a-package-to-dump-your-database/">our</a> <a href="https://murze.be/2016/06/retrieve-google-analytics-date-laravel/">team</a> <a href="https://murze.be/2017/07/easily-optimize-images-using-php-binaries/">releases</a> <a href="https://murze.be/2016/06/make-laravel-app-comply-crazy-eu-cookie-law/">a</a> <a href="https://murze.be/2016/03/a-modern-package-to-generate-menus/">package</a> <a href="https://murze.be/2016/06/laravel-package-export-php-variables-javascript/">I</a> <a href="https://murze.be/2015/08/url-signing-in-laravel/">have</a> <a href="https://murze.be/2016/08/handy-collection-macros">the</a> <a href="https://murze.be/2017/04/dropbox-will-turn-off-v1-of-their-api-soon-its-time-to-update-your-php-application/">habit</a> <a href="https://murze.be/2016/10/laravel-tags/">of</a> <a href="https://murze.be/2016/01/a-package-to-extract-text-from-a-pdf/">writing</a> <a href="https://murze.be/2016/10/redirect-missing-pages-in-your-laravel-application/">an</a> <a href="https://murze.be/2016/03/a-package-to-easily-generate-feeds-in-laravel/">introductory</a> <a href="https://murze.be/2016/04/easily-store-some-values/">blogpost</a>. But after the initial release most pages gain more features through PRs by the community and ourselves. Mostly these new feature go unnoticed. That's why I plan on regularly writings posts on noteworthy changes across our repos.</p>
<h3><a href="https://github.com/spatie/browsershot">Browsershot</a></h3>
<p>This package makes it easy to convert any webpage (or html string) to an image or a pdf. Under the hood headless Chrome is leveraged. A while ago I took the time to add a new <code>bodyHtml</code> method to it. Here's how that can be used:</p>
<pre><code>Browsershot::url('https://spatie.be')-&gt;bodyHtml();
</code></pre>
<p>The method returns the html of the dom after JavaScript has been executed. Pretty cool.</p>
<p>Among our packages there's also <a href="https://github.com/spatie/crawler">a powerful crawler</a>. <code>bodyHtml</code> paved the way for <a href="https://github.com/spatie/crawler/blob/e7ebdf6fd52f5bc986ebb20bb484d2390f34887a/src/Crawler.php#L259-L270">making that crawler execute JavaScript as well</a>. So now it can also find links that were injected by JavaScript scripts on your site.</p>
<p>Our <a href="https://github.com/spatie/laravel-sitemap">laravel-sitemap</a> package uses that crawler to automatically create a sitemap of your site. Now that the crawler can execute JavaScript, <a href="https://github.com/spatie/laravel-sitemap/blob/master/src/SitemapGenerator.php#L81-L83">the sitemap generator can now add pages which are linked to by JavaScript injected links</a>.</p>
<h3><a href="https://docs.spatie.be/laravel-medialibrary">laravel-medialibrary</a></h3>
<p>Our medialibrary is a pretty powerful package that can associate all sort of files with eloquent models. Here's <a href="https://murze.be/2017/08/getting-started-laravel-medialibrary-video-tutorial/">a video that demonstrates what the package is capable of</a>.</p>
<p><a href="https://github.com/spatie/laravel-medialibrary/pull/760">A PR by Alex Vanderbist</a> makes it possible to generate temporary URLs to files that are stored on S3.</p>
<p>Here's how you can do that</p>
<pre><code>$yourModel
   -&gt;getMedia()
   -&gt;first()
   -&gt;getTemporaryUrl(Carbon::now()-&gt;addMinutes(5), 'thumb'); // Temporary S3 url
</code></pre>
<h3><a href="https://github.com/spatie/laravel-translatable">laravel-translatable</a></h3>
<p>This package makes it easy make eloquent models translatable.  Translations are stored as json. There is no extra table needed to hold them. Previously a translation should be set like this:</p>
<pre><code>$yourModel-&gt;setTranslation('name', 'en', 'Name in English')
</code></pre>
<p><a href="https://github.com/spatie/laravel-translatable/pull/80">A PR by flofloflo</a> adds an alternative way to go about this:</p>
<pre><code>// assuming your the locale of the app is set to `en`
$yourModel-&gt;name = 'Name in English
</code></pre>
<p>Feels much more natural.</p>
<h3><a href="https://github.com/spatie/laravel-demo-mode">laravel-demo-mode</a></h3>
<p>Our demo mode package provides a middleware that can protect your work in progress from prying eyes. Visitors should first visit a specific (secret) url before they can see that content of the project you're building.</p>
<p><a href="https://github.com/spatie/laravel-demo-mode/pull/18">A PR by Alex Vanderbist</a> added these two options to the config file that make it possible to make a whitelist on an IP address basis.</p>
<pre><code>/**
 * The following IP addresses will automatically have access to the app
 * without having to pass the `demoAccess` route.
 */
'authorized_ips' =&gt; [

],

/**
 * If strict mode is enabled then only the IP addresses listed in `authorized_ips` are allowed.
 * Vistors won't be able to gain access by visiting the  `demoAccess` route anymore.
 */
'strict_mode' =&gt; false,
</code></pre>]]>
            </summary>
            <updated>2017-11-17T15:21:55+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Building an SMS admin powered by Laravel and Nexmo]]></title>
            <link rel="alternate" href="https://murze.be/building-an-sms-admin-powered-by-laravel-and-nexmo" />
            <id>https://murze.be/860</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://twitter.com/gonedark">JMac</a>, the creator of <a href="https://laravelshift.com/">Laravel Shift</a>, shared how he can very easily spin up a new job on his service by sending a simple SMS message.</p>
<blockquote>In the end, all I need is a quick way to run a Shift on the go. Looking back on almost two years of support, I often have the Shift number readily available. Creating the job and adding it to the queue is at most two lines of code. So the steps are not the pain point.

The pain point is connecting to the server. Unless I want to carry my laptop around, I can’t connect to the server to run the Shift. (I actually have taken my laptop with me during peak times.)

What do I carry around with me all the time? My phone. I’m already reviewing the support emails from my phone. Wouldn’t it be great when I need to run a Shift manually to just reply or send a text.</blockquote>
<p><a href="https://jason.pureconcepts.net/2017/09/nexmo-sms-admin-laravel/"><a href="https://jason.pureconcepts.net/2017/09/nexmo-sms-admin-laravel/">https://jason.pureconcepts.net/2017/09/nexmo-sms-admin-laravel/</a></a></p>]]>
            </summary>
            <updated>2017-11-17T15:21:55+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[All videos of Laracon EU 2017 have been released]]></title>
            <link rel="alternate" href="https://murze.be/all-videos-of-laracon-eu-2017-have-been-released" />
            <id>https://murze.be/859</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p>Laracon EU 2017 was, like the previous years, an excellent event. Together with 700+ fellow artisans I very much enjoyed watching the talks and meeting people between them. All video's of this edition have recently been made available on YouTube. Here's <a href="https://www.youtube.com/watch?v=JPxhnRh1Rr8&list=PLMdXHJK-lGoBFZgG2juDXF6LiikpQeLx2">a handy playlist that contains them all</a>.</p>
<p>I had the honor of speaking at the event as well, here's the video of my talk:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/jtB_rTh61Zo" frameborder="0" allowfullscreen></iframe>]]>
            </summary>
            <updated>2017-11-17T15:21:55+00:00</updated>
        </entry>
            <entry>
            <title><![CDATA[Goodbye controllers, hello request handlers]]></title>
            <link rel="alternate" href="https://murze.be/goodbye-controllers-hello-request-handlers" />
            <id>https://murze.be/858</id>
            <author>
                <name> <![CDATA[Freek Van der Herten]]></name>
            </author>
            <summary type="html">
                <![CDATA[<p><a href="https://twitter.com/jenssegers">Jens Segers</a>, developer at Teamleader and author of the popular <a href="https://github.com/jenssegers/optimus">Optimus</a> and <a href="https://github.com/jenssegers/laravel-mongodb">laravel-mongodb</a> packages, wrote about an alternative to controllers.</p>
<blockquote>Let me introduce you to request handlers. The concept is very simple, yet very unknown to a lot of PHP developers. A request handler is basically a controller, but limited to one single action. This concept is very similar to the Action-Domain-Responder pattern which was proposed by Paul M. Jones, an alternative for the MVC pattern that focuses on a more clear request to response flow for web applications.</blockquote>
<p><a href="https://jenssegers.com/85/goodbye-controllers-hello-request-handlers"><a href="https://jenssegers.com/85/goodbye-controllers-hello-request-handlers">https://jenssegers.com/85/goodbye-controllers-hello-request-handlers</a></a></p>]]>
            </summary>
            <updated>2017-11-17T15:21:55+00:00</updated>
        </entry>
    </feed>
